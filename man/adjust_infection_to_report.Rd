% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adjust.R
\name{adjust_infection_to_report}
\alias{adjust_infection_to_report}
\title{Adjust from Case Counts by Infection Date to Date of Report}
\usage{
adjust_infection_to_report(
  infections,
  delay_def,
  incubation_def,
  reporting_effect,
  reporting_model,
  type = "sample",
  return_onset = FALSE,
  truncate_future = TRUE
)
}
\arguments{
\item{infections}{\code{data.table} containing a \code{date} variable and a numeric \code{cases} variable.}

\item{delay_def}{A single row data.table that defines the delay distribution (model, parameters and maximum delay for each model).
See \code{lognorm_dist_def} for an example of the structure.}

\item{incubation_def}{A single row data.table that defines the incubation distribution (model, parameters and maximum delay for each model).
See \code{lognorm_dist_def} for an example of the structure.}

\item{reporting_effect}{A numeric vector of length 7 that allows the scaling of reported cases
by the day on which they report (1 = Monday, 7 = Sunday). By default no scaling occurs.}

\item{reporting_model}{A function that takes a single numeric vector as an argument and returns a
single numeric vector. Can be used to apply stochastic reporting effects. See the examples for details.}

\item{type}{Character string indicating the method to use to transfrom counts. Supports either "sample"
which approximates sampling or "median" would shift by the median of the distribution.}

\item{return_onset}{Logical, defaults to \code{FALSE}. Should cases by date of onset also be returned?}

\item{truncate_future}{Logical, should cases be truncted if they occur after the first date reported in the data.
Defaults to \code{TRUE}.}
}
\value{
A \code{data.table} containing a \code{date} variable (date of report) and a \code{cases} variable. If \code{return_onset = TRUE} there will be
a third variable \code{reference} which indicates what the date variable refers to.
}
\description{
Stochastic mapping from cases by date of infection to date of report via date of
onset. Essentially reversal of \code{nowcast_pipeline}.
}
\examples{

## Define example cases
cases <- data.table::as.data.table(EpiSoon::example_obs_cases) 

cases <- cases[, `:=`(confirm = as.integer(cases), import_status = "local")]

## Define a single report delay distribution
delay_def <- EpiNow::lognorm_dist_def(mean = 5, 
                                      mean_sd = 1,
                                      sd = 3,
                                      sd_sd = 1,
                                      max_value = 30,
                                      samples = 1,
                                      to_log = TRUE)
                                       
## Define a single incubation period
incubation_def <- EpiNow::lognorm_dist_def(mean = EpiNow::covid_incubation_period[1, ]$mean,
                                           mean_sd = EpiNow::covid_incubation_period[1, ]$mean_sd,
                                           sd = EpiNow::covid_incubation_period[1, ]$sd,
                                           sd_sd = EpiNow::covid_incubation_period[1, ]$sd_sd,
                                           max_value = 30, samples = 1)
                                           

## Perform a nowcast
nowcast <- nowcast_pipeline(reported_cases = cases, 
                            target_date = max(cases$date),
                            delay_defs = delay_def,
                            incubation_defs = incubation_def)
                            

infections <- nowcast[type \%in\% "infection_upscaled" & import_status \%in\% "local"]
infections <- infections[, `:=`(type = NULL, import_status = NULL)]


## Simple mapping
report <- adjust_infection_to_report(infections, delay_def, incubation_def)   

print(report)   

## Mapping with a weekly reporting effect
report_weekly <- adjust_infection_to_report(
                      infections, delay_def, incubation_def,
                      reporting_effect = c(1.1, rep(1, 4), 0.95, 0.95))          
                             
print(report_weekly) 

## Map using a deterministic median shift for both delays
report_median <- adjust_infection_to_report(infections, delay_def, 
                                           incubation_def, type = "median")      
                                           
                                                   
                                                           
## Map with a weekly reporting effect and stochastic reporting model
report_stochastic <- adjust_infection_to_report(
                      infections, delay_def, incubation_def,
                      reporting_effect = c(1.1, rep(1, 4), 0.95, 0.95),
                      reporting_model = function(n) {
                      out <- suppressWarnings(rnbinom(length(n), as.integer(n), 0.5))
                      out <- ifelse(is.na(out), 0, out)
                      })          
                             
print(report_stochastic)         
}
