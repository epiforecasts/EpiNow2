// Generated by rstantools.  Do not edit by hand.

/*
    EpiNow2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiNow2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiNow2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_estimate_infections_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_estimate_infections");
    reader.add_event(1, 1, "include", "functions/pmfs.stan");
    reader.add_event(1, 0, "start", "functions/pmfs.stan");
    reader.add_event(26, 25, "end", "functions/pmfs.stan");
    reader.add_event(26, 2, "restart", "model_estimate_infections");
    reader.add_event(26, 2, "include", "functions/convolve.stan");
    reader.add_event(26, 0, "start", "functions/convolve.stan");
    reader.add_event(73, 47, "end", "functions/convolve.stan");
    reader.add_event(73, 3, "restart", "model_estimate_infections");
    reader.add_event(73, 3, "include", "functions/gaussian_process.stan");
    reader.add_event(73, 0, "start", "functions/gaussian_process.stan");
    reader.add_event(138, 65, "end", "functions/gaussian_process.stan");
    reader.add_event(138, 4, "restart", "model_estimate_infections");
    reader.add_event(138, 4, "include", "functions/rt.stan");
    reader.add_event(138, 0, "start", "functions/rt.stan");
    reader.add_event(212, 74, "end", "functions/rt.stan");
    reader.add_event(212, 5, "restart", "model_estimate_infections");
    reader.add_event(212, 5, "include", "functions/infections.stan");
    reader.add_event(212, 0, "start", "functions/infections.stan");
    reader.add_event(279, 67, "end", "functions/infections.stan");
    reader.add_event(279, 6, "restart", "model_estimate_infections");
    reader.add_event(279, 6, "include", "functions/observation_model.stan");
    reader.add_event(279, 0, "start", "functions/observation_model.stan");
    reader.add_event(306, 27, "end", "functions/observation_model.stan");
    reader.add_event(306, 7, "restart", "model_estimate_infections");
    reader.add_event(306, 7, "include", "functions/generated_quantities.stan");
    reader.add_event(306, 0, "start", "functions/generated_quantities.stan");
    reader.add_event(333, 27, "end", "functions/generated_quantities.stan");
    reader.add_event(333, 8, "restart", "model_estimate_infections");
    reader.add_event(337, 12, "include", "data/observations.stan");
    reader.add_event(337, 0, "start", "data/observations.stan");
    reader.add_event(342, 5, "end", "data/observations.stan");
    reader.add_event(342, 13, "restart", "model_estimate_infections");
    reader.add_event(342, 13, "include", "data/delays.stan");
    reader.add_event(342, 0, "start", "data/delays.stan");
    reader.add_event(348, 6, "end", "data/delays.stan");
    reader.add_event(348, 14, "restart", "model_estimate_infections");
    reader.add_event(348, 14, "include", "data/gaussian_process.stan");
    reader.add_event(348, 0, "start", "data/gaussian_process.stan");
    reader.add_event(355, 7, "end", "data/gaussian_process.stan");
    reader.add_event(355, 15, "restart", "model_estimate_infections");
    reader.add_event(355, 15, "include", "data/generation_time.stan");
    reader.add_event(355, 0, "start", "data/generation_time.stan");
    reader.add_event(360, 5, "end", "data/generation_time.stan");
    reader.add_event(360, 16, "restart", "model_estimate_infections");
    reader.add_event(360, 16, "include", "data/rt.stan");
    reader.add_event(360, 0, "start", "data/rt.stan");
    reader.add_event(367, 7, "end", "data/rt.stan");
    reader.add_event(367, 17, "restart", "model_estimate_infections");
    reader.add_event(367, 17, "include", "data/observation_model.stan");
    reader.add_event(367, 0, "start", "data/observation_model.stan");
    reader.add_event(370, 3, "end", "data/observation_model.stan");
    reader.add_event(370, 18, "restart", "model_estimate_infections");
    reader.add_event(473, 119, "end", "model_estimate_infections");
    return reader;
}
template <typename T1__, typename T2__>
typename boost::math::tools::promote_args<T1__, T2__>::type
discretised_gamma_pmf(const int& y,
                          const T1__& mu,
                          const T2__& sigma,
                          const int& max_val, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 5;
        local_scalar_t__ c_sigma(DUMMY_VAR__);
        (void) c_sigma;  // dummy to suppress unused var warning
        stan::math::initialize(c_sigma, DUMMY_VAR__);
        stan::math::fill(c_sigma, DUMMY_VAR__);
        stan::math::assign(c_sigma,(sigma + 1e-5));
        current_statement_begin__ = 6;
        local_scalar_t__ alpha(DUMMY_VAR__);
        (void) alpha;  // dummy to suppress unused var warning
        stan::math::initialize(alpha, DUMMY_VAR__);
        stan::math::fill(alpha, DUMMY_VAR__);
        stan::math::assign(alpha,pow((mu / c_sigma), 2));
        current_statement_begin__ = 7;
        local_scalar_t__ beta(DUMMY_VAR__);
        (void) beta;  // dummy to suppress unused var warning
        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta, DUMMY_VAR__);
        stan::math::assign(beta,(mu / pow(c_sigma, 2)));
        current_statement_begin__ = 9;
        stan::math::assign(alpha, (logical_lte(alpha, 0) ? stan::math::promote_scalar<local_scalar_t__>(1e-5) : stan::math::promote_scalar<local_scalar_t__>(alpha) ));
        current_statement_begin__ = 10;
        stan::math::assign(beta, (logical_lte(beta, 0) ? stan::math::promote_scalar<local_scalar_t__>(1e-5) : stan::math::promote_scalar<local_scalar_t__>(beta) ));
        current_statement_begin__ = 11;
        stan::math::assign(alpha, (is_inf(alpha) ? stan::math::promote_scalar<local_scalar_t__>(1e8) : stan::math::promote_scalar<local_scalar_t__>(alpha) ));
        current_statement_begin__ = 12;
        stan::math::assign(beta, (is_inf(beta) ? stan::math::promote_scalar<local_scalar_t__>(1e8) : stan::math::promote_scalar<local_scalar_t__>(beta) ));
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((gamma_cdf((y + 1), alpha, beta) - gamma_cdf(y, alpha, beta)) / (gamma_cdf((max_val + 1), alpha, beta) - gamma_cdf(1, alpha, beta))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct discretised_gamma_pmf_functor__ {
    template <typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const int& y,
                          const T1__& mu,
                          const T2__& sigma,
                          const int& max_val, std::ostream* pstream__) const {
        return discretised_gamma_pmf(y, mu, sigma, max_val, pstream__);
    }
};
template <typename T1__, typename T2__>
typename boost::math::tools::promote_args<T1__, T2__>::type
discretised_lognormal_pmf(const int& y,
                              const T1__& mu,
                              const T2__& sigma,
                              const int& max_val, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 20;
        local_scalar_t__ small(DUMMY_VAR__);
        (void) small;  // dummy to suppress unused var warning
        stan::math::initialize(small, DUMMY_VAR__);
        stan::math::fill(small, DUMMY_VAR__);
        stan::math::assign(small,1e-5);
        current_statement_begin__ = 21;
        local_scalar_t__ adj_y(DUMMY_VAR__);
        (void) adj_y;  // dummy to suppress unused var warning
        stan::math::initialize(adj_y, DUMMY_VAR__);
        stan::math::fill(adj_y, DUMMY_VAR__);
        stan::math::assign(adj_y,(y + small));
        current_statement_begin__ = 22;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((normal_cdf(((stan::math::log((adj_y + 1)) - mu) / sigma), 0.0, 1.0) - normal_cdf(((stan::math::log(adj_y) - mu) / sigma), 0.0, 1.0)) / (normal_cdf(((stan::math::log((max_val + small)) - mu) / sigma), 0.0, 1.0) - normal_cdf(((stan::math::log(small) - mu) / sigma), 0.0, 1.0))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct discretised_lognormal_pmf_functor__ {
    template <typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const int& y,
                              const T1__& mu,
                              const T2__& sigma,
                              const int& max_val, std::ostream* pstream__) const {
        return discretised_lognormal_pmf(y, mu, sigma, max_val, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
convolve(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& cases,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& pdf, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 29;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(cases));
        current_statement_begin__ = 30;
        int max_pdf(0);
        (void) max_pdf;  // dummy to suppress unused var warning
        stan::math::fill(max_pdf, std::numeric_limits<int>::min());
        stan::math::assign(max_pdf,num_elements(pdf));
        current_statement_begin__ = 31;
        validate_non_negative_index("convolved_cases", "t", t);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> convolved_cases(t);
        stan::math::initialize(convolved_cases, DUMMY_VAR__);
        stan::math::fill(convolved_cases, DUMMY_VAR__);
        stan::math::assign(convolved_cases,rep_vector(1e-5, t));
        current_statement_begin__ = 32;
        for (int s = 1; s <= t; ++s) {
            current_statement_begin__ = 33;
            stan::model::assign(convolved_cases, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        (stan::model::rvalue(convolved_cases, stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), "convolved_cases") + dot_product(stan::model::rvalue(cases, stan::model::cons_list(stan::model::index_min_max(std::max(1, ((s - max_pdf) + 1)), s), stan::model::nil_index_list()), "cases"), tail(pdf, std::min(max_pdf, s)))), 
                        "assigning variable convolved_cases");
        }
        current_statement_begin__ = 35;
        return stan::math::promote_scalar<fun_return_scalar_t__>(convolved_cases);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct convolve_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& cases,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& pdf, std::ostream* pstream__) const {
        return convolve(cases, pdf, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
convolve_to_report(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& infections,
                       const std::vector<T1__>& delay_mean,
                       const std::vector<T2__>& delay_sd,
                       const std::vector<int>& max_delay,
                       const int& seeding_time, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 44;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(infections));
        current_statement_begin__ = 45;
        validate_non_negative_index("reports", "(t - seeding_time)", (t - seeding_time));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reports((t - seeding_time));
        stan::math::initialize(reports, DUMMY_VAR__);
        stan::math::fill(reports, DUMMY_VAR__);
        current_statement_begin__ = 46;
        validate_non_negative_index("reports_hold", "t", t);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reports_hold(t);
        stan::math::initialize(reports_hold, DUMMY_VAR__);
        stan::math::fill(reports_hold, DUMMY_VAR__);
        stan::math::assign(reports_hold,infections);
        current_statement_begin__ = 47;
        int delays(0);
        (void) delays;  // dummy to suppress unused var warning
        stan::math::fill(delays, std::numeric_limits<int>::min());
        stan::math::assign(delays,num_elements(delay_mean));
        current_statement_begin__ = 48;
        if (as_bool(delays)) {
            current_statement_begin__ = 49;
            for (int s = 1; s <= delays; ++s) {
                {
                current_statement_begin__ = 50;
                validate_non_negative_index("rev_delay", "get_base1(max_delay, s, \"max_delay\", 1)", get_base1(max_delay, s, "max_delay", 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rev_delay(get_base1(max_delay, s, "max_delay", 1));
                stan::math::initialize(rev_delay, DUMMY_VAR__);
                stan::math::fill(rev_delay, DUMMY_VAR__);
                stan::math::assign(rev_delay,rep_vector(1e-5, get_base1(max_delay, s, "max_delay", 1)));
                current_statement_begin__ = 51;
                for (int j = 1; j <= get_base1(max_delay, s, "max_delay", 1); ++j) {
                    current_statement_begin__ = 52;
                    stan::model::assign(rev_delay, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                (stan::model::rvalue(rev_delay, stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), "rev_delay") + discretised_lognormal_pmf((get_base1(max_delay, s, "max_delay", 1) - j), get_base1(delay_mean, s, "delay_mean", 1), get_base1(delay_sd, s, "delay_sd", 1), get_base1(max_delay, s, "max_delay", 1), pstream__)), 
                                "assigning variable rev_delay");
                }
                current_statement_begin__ = 55;
                stan::math::assign(reports_hold, convolve(reports_hold, rev_delay, pstream__));
                }
            }
            current_statement_begin__ = 57;
            stan::math::assign(reports, stan::model::rvalue(reports_hold, stan::model::cons_list(stan::model::index_min_max((seeding_time + 1), t), stan::model::nil_index_list()), "reports_hold"));
        } else {
            current_statement_begin__ = 59;
            stan::math::assign(reports, stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max((seeding_time + 1), t), stan::model::nil_index_list()), "infections"));
        }
        current_statement_begin__ = 61;
        return stan::math::promote_scalar<fun_return_scalar_t__>(reports);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct convolve_to_report_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& infections,
                       const std::vector<T1__>& delay_mean,
                       const std::vector<T2__>& delay_sd,
                       const std::vector<int>& max_delay,
                       const int& seeding_time, std::ostream* pstream__) const {
        return convolve_to_report(infections, delay_mean, delay_sd, max_delay, seeding_time, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
void
delays_lp(const std::vector<T0__>& delay_mean,
              const std::vector<T1__>& delay_mean_mean,
              const std::vector<T2__>& delay_mean_sd,
              const std::vector<T3__>& delay_sd,
              const std::vector<T4__>& delay_sd_mean,
              const std::vector<T5__>& delay_sd_sd,
              const int& weight, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 66;
        int delays(0);
        (void) delays;  // dummy to suppress unused var warning
        stan::math::fill(delays, std::numeric_limits<int>::min());
        stan::math::assign(delays,num_elements(delay_mean));
        current_statement_begin__ = 67;
        if (as_bool(delays)) {
            current_statement_begin__ = 68;
            for (int s = 1; s <= delays; ++s) {
                current_statement_begin__ = 69;
                lp_accum__.add((normal_log(get_base1(delay_mean, s, "delay_mean", 1), get_base1(delay_mean_mean, s, "delay_mean_mean", 1), get_base1(delay_mean_sd, s, "delay_mean_sd", 1)) * weight));
                current_statement_begin__ = 70;
                lp_accum__.add((normal_log(get_base1(delay_sd, s, "delay_sd", 1), get_base1(delay_sd_mean, s, "delay_sd_mean", 1), get_base1(delay_sd_sd, s, "delay_sd_sd", 1)) * weight));
            }
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct delays_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const std::vector<T0__>& delay_mean,
              const std::vector<T1__>& delay_mean_mean,
              const std::vector<T2__>& delay_mean_sd,
              const std::vector<T3__>& delay_sd,
              const std::vector<T4__>& delay_sd_mean,
              const std::vector<T5__>& delay_sd_sd,
              const int& weight, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return delays_lp(delay_mean, delay_mean_mean, delay_mean_sd, delay_sd, delay_sd_mean, delay_sd_sd, weight, lp__, lp_accum__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
spd_SE(const T0__& alpha,
           const T1__& rho,
           const T2__& w, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 76;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 77;
        stan::math::assign(S, (((pow(alpha, 2) * stan::math::sqrt((2 * stan::math::pi()))) * rho) * stan::math::exp(((-(0.5) * pow(rho, 2)) * pow(w, 2)))));
        current_statement_begin__ = 78;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct spd_SE_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& alpha,
           const T1__& rho,
           const T2__& w, std::ostream* pstream__) const {
        return spd_SE(alpha, rho, w, pstream__);
    }
};
template <typename T0__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
phi_SE(const T0__& L,
           const int& m,
           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 84;
        validate_non_negative_index("fi", "rows(x)", rows(x));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fi(rows(x));
        stan::math::initialize(fi, DUMMY_VAR__);
        stan::math::fill(fi, DUMMY_VAR__);
        current_statement_begin__ = 85;
        stan::math::assign(fi, multiply((1 / stan::math::sqrt(L)), stan::math::sin(multiply(((m * stan::math::pi()) / (2 * L)), add(x, L)))));
        current_statement_begin__ = 86;
        return stan::math::promote_scalar<fun_return_scalar_t__>(fi);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct phi_SE_functor__ {
    template <typename T0__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const T0__& L,
           const int& m,
           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) const {
        return phi_SE(L, m, x, pstream__);
    }
};
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
lambda(const T0__& L,
           const int& m, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 92;
        local_scalar_t__ lam(DUMMY_VAR__);
        (void) lam;  // dummy to suppress unused var warning
        stan::math::initialize(lam, DUMMY_VAR__);
        stan::math::fill(lam, DUMMY_VAR__);
        current_statement_begin__ = 93;
        stan::math::assign(lam, pow(((m * stan::math::pi()) / (2 * L)), 2));
        current_statement_begin__ = 94;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lam);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lambda_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const T0__& L,
           const int& m, std::ostream* pstream__) const {
        return lambda(L, m, pstream__);
    }
};
int
setup_noise(const int& ot_h,
                const int& t,
                const int& horizon,
                const int& estimate_r,
                const int& stationary,
                const int& future_fixed,
                const int& fixed_from, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 100;
        int noise_time(0);
        (void) noise_time;  // dummy to suppress unused var warning
        stan::math::fill(noise_time, std::numeric_limits<int>::min());
        stan::math::assign(noise_time,(logical_gt(estimate_r, 0) ? (logical_gt(stationary, 0) ? ot_h : (ot_h - 1) ) : t ));
        current_statement_begin__ = 101;
        int noise_terms(0);
        (void) noise_terms;  // dummy to suppress unused var warning
        stan::math::fill(noise_terms, std::numeric_limits<int>::min());
        stan::math::assign(noise_terms,(logical_gt(future_fixed, 0) ? ((noise_time - horizon) + fixed_from) : noise_time ));
        current_statement_begin__ = 102;
        return stan::math::promote_scalar<fun_return_scalar_t__>(noise_terms);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct setup_noise_functor__ {
            int
    operator()(const int& ot_h,
                const int& t,
                const int& horizon,
                const int& estimate_r,
                const int& stationary,
                const int& future_fixed,
                const int& fixed_from, std::ostream* pstream__) const {
        return setup_noise(ot_h, t, horizon, estimate_r, stationary, future_fixed, fixed_from, pstream__);
    }
};
template <typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
setup_gp(const int& M,
             const T1__& L,
             const int& dimension, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 107;
        validate_non_negative_index("time", "dimension", dimension);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> time(dimension);
        stan::math::initialize(time, DUMMY_VAR__);
        stan::math::fill(time, DUMMY_VAR__);
        current_statement_begin__ = 108;
        validate_non_negative_index("PHI", "dimension", dimension);
        validate_non_negative_index("PHI", "M", M);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> PHI(dimension, M);
        stan::math::initialize(PHI, DUMMY_VAR__);
        stan::math::fill(PHI, DUMMY_VAR__);
        current_statement_begin__ = 109;
        for (int s = 1; s <= dimension; ++s) {
            current_statement_begin__ = 110;
            stan::model::assign(time, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        s, 
                        "assigning variable time");
        }
        current_statement_begin__ = 112;
        for (int m = 1; m <= M; ++m) {
            current_statement_begin__ = 113;
            stan::model::assign(PHI, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                        phi_SE(L, m, time, pstream__), 
                        "assigning variable PHI");
        }
        current_statement_begin__ = 115;
        return stan::math::promote_scalar<fun_return_scalar_t__>(PHI);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct setup_gp_functor__ {
    template <typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& M,
             const T1__& L,
             const int& dimension, std::ostream* pstream__) const {
        return setup_gp(M, L, dimension, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, 1>
update_gp(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& PHI,
              const int& M,
              const T2__& L,
              const T3__& alpha,
              const T4__& rho,
              const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& eta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 120;
        validate_non_negative_index("diagSPD", "M", M);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> diagSPD(M);
        stan::math::initialize(diagSPD, DUMMY_VAR__);
        stan::math::fill(diagSPD, DUMMY_VAR__);
        current_statement_begin__ = 121;
        validate_non_negative_index("SPD_eta", "M", M);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> SPD_eta(M);
        stan::math::initialize(SPD_eta, DUMMY_VAR__);
        stan::math::fill(SPD_eta, DUMMY_VAR__);
        current_statement_begin__ = 122;
        int noise_terms(0);
        (void) noise_terms;  // dummy to suppress unused var warning
        stan::math::fill(noise_terms, std::numeric_limits<int>::min());
        stan::math::assign(noise_terms,rows(PHI));
        current_statement_begin__ = 123;
        validate_non_negative_index("noise", "noise_terms", noise_terms);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> noise(noise_terms);
        stan::math::initialize(noise, DUMMY_VAR__);
        stan::math::fill(noise, DUMMY_VAR__);
        stan::math::assign(noise,rep_vector(1e-6, noise_terms));
        current_statement_begin__ = 125;
        for (int m = 1; m <= M; ++m) {
            current_statement_begin__ = 126;
            stan::model::assign(diagSPD, 
                        stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                        stan::math::sqrt(spd_SE(alpha, rho, stan::math::sqrt(lambda(L, m, pstream__)), pstream__)), 
                        "assigning variable diagSPD");
        }
        current_statement_begin__ = 128;
        stan::math::assign(SPD_eta, elt_multiply(diagSPD, eta));
        current_statement_begin__ = 129;
        stan::math::assign(noise, add(noise, multiply(stan::model::rvalue(PHI, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "PHI"), SPD_eta)));
        current_statement_begin__ = 130;
        return stan::math::promote_scalar<fun_return_scalar_t__>(noise);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct update_gp_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& PHI,
              const int& M,
              const T2__& L,
              const T3__& alpha,
              const T4__& rho,
              const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& eta, std::ostream* pstream__) const {
        return update_gp(PHI, M, L, alpha, rho, eta, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
void
gaussian_process_lp(const std::vector<T0__>& rho,
                        const std::vector<T1__>& alpha,
                        const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& eta,
                        const T3__& ls_alpha,
                        const T4__& ls_beta,
                        const T5__& alpha_sd, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 135;
        lp_accum__.add(inv_gamma_log<propto__>(rho, ls_alpha, ls_beta));
        current_statement_begin__ = 136;
        lp_accum__.add(normal_log<propto__>(alpha, 0, alpha_sd));
        current_statement_begin__ = 137;
        lp_accum__.add(std_normal_log<propto__>(eta));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gaussian_process_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const std::vector<T0__>& rho,
                        const std::vector<T1__>& alpha,
                        const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& eta,
                        const T3__& ls_alpha,
                        const T4__& ls_beta,
                        const T5__& alpha_sd, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return gaussian_process_lp(rho, alpha, eta, ls_alpha, ls_beta, alpha_sd, lp__, lp_accum__, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
update_breakpoints(const T0__& input_R,
                       const std::vector<T1__>& bp_effects,
                       const int& bp_index,
                       const int& at_bp,
                       const int& stationary, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 144;
        local_scalar_t__ R(DUMMY_VAR__);
        (void) R;  // dummy to suppress unused var warning
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        stan::math::assign(R,input_R);
        current_statement_begin__ = 145;
        if (as_bool(stationary)) {
            current_statement_begin__ = 146;
            if (as_bool(logical_gt(bp_index, 0))) {
                current_statement_begin__ = 147;
                stan::math::assign(R, (R + sum(stan::model::rvalue(bp_effects, stan::model::cons_list(stan::model::index_min_max(1, bp_index), stan::model::nil_index_list()), "bp_effects"))));
            }
        } else {
            current_statement_begin__ = 150;
            if (as_bool(at_bp)) {
                current_statement_begin__ = 151;
                stan::math::assign(R, (R + get_base1(bp_effects, bp_index, "bp_effects", 1)));
            }
        }
        current_statement_begin__ = 154;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct update_breakpoints_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& input_R,
                       const std::vector<T1__>& bp_effects,
                       const int& bp_index,
                       const int& at_bp,
                       const int& stationary, std::ostream* pstream__) const {
        return update_breakpoints(input_R, bp_effects, bp_index, at_bp, stationary, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
update_R(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& R,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& noise,
             const int& noise_terms,
             const int& index,
             const int& stationary, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 159;
        local_scalar_t__ cR(DUMMY_VAR__);
        (void) cR;  // dummy to suppress unused var warning
        stan::math::initialize(cR, DUMMY_VAR__);
        stan::math::fill(cR, DUMMY_VAR__);
        stan::math::assign(cR,get_base1(R, index, "R", 1));
        current_statement_begin__ = 160;
        if (as_bool(logical_gt(noise_terms, 0))) {
            current_statement_begin__ = 161;
            if (as_bool(stationary)) {
                current_statement_begin__ = 162;
                if (as_bool(logical_lte(index, noise_terms))) {
                    current_statement_begin__ = 163;
                    stan::math::assign(cR, (cR + get_base1(noise, index, "noise", 1)));
                } else {
                    current_statement_begin__ = 165;
                    if (as_bool(logical_gt(index, 1))) {
                        current_statement_begin__ = 166;
                        stan::math::assign(cR, get_base1(R, (index - 1), "R", 1));
                    }
                }
            } else {
                current_statement_begin__ = 170;
                if (as_bool(logical_lte(index, (noise_terms + 1)))) {
                    current_statement_begin__ = 171;
                    stan::math::assign(cR, (get_base1(R, (index - 1), "R", 1) + get_base1(noise, (index - 1), "noise", 1)));
                } else {
                    current_statement_begin__ = 173;
                    stan::math::assign(cR, get_base1(R, (index - 1), "R", 1));
                }
            }
        }
        current_statement_begin__ = 177;
        return stan::math::promote_scalar<fun_return_scalar_t__>(cR);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct update_R_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& R,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& noise,
             const int& noise_terms,
             const int& index,
             const int& stationary, std::ostream* pstream__) const {
        return update_R(R, noise, noise_terms, index, stationary, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type, Eigen::Dynamic, 1>
update_Rt(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& input_R,
              const T1__& log_R,
              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& noise,
              const std::vector<int>& bps,
              const std::vector<T4__>& bp_effects,
              const int& stationary, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 183;
        int noise_terms(0);
        (void) noise_terms;  // dummy to suppress unused var warning
        stan::math::fill(noise_terms, std::numeric_limits<int>::min());
        stan::math::assign(noise_terms,num_elements(noise));
        current_statement_begin__ = 184;
        int i_stationary(0);
        (void) i_stationary;  // dummy to suppress unused var warning
        stan::math::fill(i_stationary, std::numeric_limits<int>::min());
        stan::math::assign(i_stationary,(logical_gt(noise_terms, 0) ? stationary : 1 ));
        current_statement_begin__ = 185;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(input_R));
        current_statement_begin__ = 186;
        int bp_n(0);
        (void) bp_n;  // dummy to suppress unused var warning
        stan::math::fill(bp_n, std::numeric_limits<int>::min());
        stan::math::assign(bp_n,num_elements(bp_effects));
        current_statement_begin__ = 187;
        int bp_in(0);
        (void) bp_in;  // dummy to suppress unused var warning
        stan::math::fill(bp_in, std::numeric_limits<int>::min());
        stan::math::assign(bp_in,0);
        current_statement_begin__ = 188;
        int at_bp(0);
        (void) at_bp;  // dummy to suppress unused var warning
        stan::math::fill(at_bp, std::numeric_limits<int>::min());
        stan::math::assign(at_bp,0);
        current_statement_begin__ = 189;
        int index(0);
        (void) index;  // dummy to suppress unused var warning
        stan::math::fill(index, std::numeric_limits<int>::min());
        current_statement_begin__ = 190;
        validate_non_negative_index("R", "t", t);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R(t);
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        current_statement_begin__ = 192;
        if (as_bool(i_stationary)) {
            current_statement_begin__ = 193;
            stan::math::assign(R, rep_vector(log_R, t));
            current_statement_begin__ = 194;
            stan::math::assign(index, 1);
        } else {
            current_statement_begin__ = 196;
            stan::model::assign(R, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        log_R, 
                        "assigning variable R");
            current_statement_begin__ = 197;
            stan::math::assign(index, 2);
        }
        current_statement_begin__ = 200;
        for (int s = index; s <= t; ++s) {
            current_statement_begin__ = 201;
            stan::model::assign(R, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        update_R(R, noise, noise_terms, s, i_stationary, pstream__), 
                        "assigning variable R");
            current_statement_begin__ = 202;
            if (as_bool(logical_gt(bp_n, 0))) {
                current_statement_begin__ = 203;
                stan::math::assign(at_bp, get_base1(bps, s, "bps", 1));
                current_statement_begin__ = 204;
                stan::math::assign(bp_in, (bp_in + at_bp));
                current_statement_begin__ = 205;
                stan::model::assign(R, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            update_breakpoints(get_base1(R, s, "R", 1), bp_effects, bp_in, at_bp, i_stationary, pstream__), 
                            "assigning variable R");
            }
        }
        current_statement_begin__ = 209;
        stan::math::assign(R, stan::math::exp(R));
        current_statement_begin__ = 210;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct update_Rt_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& input_R,
              const T1__& log_R,
              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& noise,
              const std::vector<int>& bps,
              const std::vector<T4__>& bp_effects,
              const int& stationary, std::ostream* pstream__) const {
        return update_Rt(input_R, log_R, noise, bps, bp_effects, stationary, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
update_infectiousness(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& infections,
                          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gt_pmf,
                          const int& seeding_time,
                          const int& max_gt,
                          const int& index, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 215;
        int inf_start(0);
        (void) inf_start;  // dummy to suppress unused var warning
        stan::math::fill(inf_start, std::numeric_limits<int>::min());
        stan::math::assign(inf_start,std::max(1, ((index + seeding_time) - max_gt)));
        current_statement_begin__ = 216;
        int inf_end(0);
        (void) inf_end;  // dummy to suppress unused var warning
        stan::math::fill(inf_end, std::numeric_limits<int>::min());
        stan::math::assign(inf_end,((index + seeding_time) - 1));
        current_statement_begin__ = 217;
        int pmf_accessed(0);
        (void) pmf_accessed;  // dummy to suppress unused var warning
        stan::math::fill(pmf_accessed, std::numeric_limits<int>::min());
        stan::math::assign(pmf_accessed,std::min(max_gt, ((index + seeding_time) - 1)));
        current_statement_begin__ = 218;
        local_scalar_t__ new_inf(DUMMY_VAR__);
        (void) new_inf;  // dummy to suppress unused var warning
        stan::math::initialize(new_inf, DUMMY_VAR__);
        stan::math::fill(new_inf, DUMMY_VAR__);
        stan::math::assign(new_inf,dot_product(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(inf_start, inf_end), stan::model::nil_index_list()), "infections"), tail(gt_pmf, pmf_accessed)));
        current_statement_begin__ = 219;
        return stan::math::promote_scalar<fun_return_scalar_t__>(new_inf);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct update_infectiousness_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& infections,
                          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gt_pmf,
                          const int& seeding_time,
                          const int& max_gt,
                          const int& index, std::ostream* pstream__) const {
        return update_infectiousness(infections, gt_pmf, seeding_time, max_gt, index, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__, typename T5__, typename T6__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T5__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic, 1>
generate_infections(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& R,
                        const int& seeding_time,
                        const std::vector<T2__>& gt_mean,
                        const std::vector<T3__>& gt_sd,
                        const int& max_gt,
                        const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& shifted_cases,
                        const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& initial_infections, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__, T5__, typename boost::math::tools::promote_args<T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 225;
        int rt(0);
        (void) rt;  // dummy to suppress unused var warning
        stan::math::fill(rt, std::numeric_limits<int>::min());
        stan::math::assign(rt,num_elements(R));
        current_statement_begin__ = 226;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,(rt + seeding_time));
        current_statement_begin__ = 227;
        validate_non_negative_index("infections", "t", t);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infections(t);
        stan::math::initialize(infections, DUMMY_VAR__);
        stan::math::fill(infections, DUMMY_VAR__);
        stan::math::assign(infections,rep_vector(1e-5, t));
        current_statement_begin__ = 228;
        validate_non_negative_index("gt_pmf", "max_gt", max_gt);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gt_pmf(max_gt);
        stan::math::initialize(gt_pmf, DUMMY_VAR__);
        stan::math::fill(gt_pmf, DUMMY_VAR__);
        current_statement_begin__ = 229;
        validate_non_negative_index("infectiousness", "rt", rt);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infectiousness(rt);
        stan::math::initialize(infectiousness, DUMMY_VAR__);
        stan::math::fill(infectiousness, DUMMY_VAR__);
        stan::math::assign(infectiousness,rep_vector(1e-5, rt));
        current_statement_begin__ = 231;
        for (int j = 1; j <= max_gt; ++j) {
            current_statement_begin__ = 232;
            stan::model::assign(gt_pmf, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        discretised_gamma_pmf(((max_gt - j) + 1), get_base1(gt_mean, 1, "gt_mean", 1), get_base1(gt_sd, 1, "gt_sd", 1), max_gt, pstream__), 
                        "assigning variable gt_pmf");
        }
        current_statement_begin__ = 235;
        stan::model::assign(infections, 
                    stan::model::cons_list(stan::model::index_min_max(1, seeding_time), stan::model::nil_index_list()), 
                    stan::model::deep_copy(add(stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_min_max(1, seeding_time), stan::model::nil_index_list()), "infections"), elt_multiply(stan::model::rvalue(shifted_cases, stan::model::cons_list(stan::model::index_min_max(1, seeding_time), stan::model::nil_index_list()), "shifted_cases"), initial_infections))), 
                    "assigning variable infections");
        current_statement_begin__ = 237;
        for (int s = 1; s <= rt; ++s) {
            current_statement_begin__ = 238;
            stan::model::assign(infectiousness, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        (stan::model::rvalue(infectiousness, stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), "infectiousness") + update_infectiousness(infections, gt_pmf, seeding_time, max_gt, s, pstream__)), 
                        "assigning variable infectiousness");
            current_statement_begin__ = 239;
            stan::model::assign(infections, 
                        stan::model::cons_list(stan::model::index_uni((s + seeding_time)), stan::model::nil_index_list()), 
                        (stan::model::rvalue(infections, stan::model::cons_list(stan::model::index_uni((s + seeding_time)), stan::model::nil_index_list()), "infections") + (get_base1(R, s, "R", 1) * get_base1(infectiousness, s, "infectiousness", 1))), 
                        "assigning variable infections");
        }
        current_statement_begin__ = 241;
        return stan::math::promote_scalar<fun_return_scalar_t__>(infections);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct generate_infections_functor__ {
    template <typename T0__, typename T2__, typename T3__, typename T5__, typename T6__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__, T5__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& R,
                        const int& seeding_time,
                        const std::vector<T2__>& gt_mean,
                        const std::vector<T3__>& gt_sd,
                        const int& max_gt,
                        const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& shifted_cases,
                        const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& initial_infections, std::ostream* pstream__) const {
        return generate_infections(R, seeding_time, gt_mean, gt_sd, max_gt, shifted_cases, initial_infections, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
deconvolve_infections(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& shifted_cases,
                          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& noise,
                          const int& fixed, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 246;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(shifted_cases));
        current_statement_begin__ = 247;
        validate_non_negative_index("infections", "t", t);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infections(t);
        stan::math::initialize(infections, DUMMY_VAR__);
        stan::math::fill(infections, DUMMY_VAR__);
        stan::math::assign(infections,rep_vector(1e-5, t));
        current_statement_begin__ = 248;
        if (as_bool(logical_negation(fixed))) {
            current_statement_begin__ = 249;
            stan::math::assign(infections, add(infections, elt_multiply(shifted_cases, stan::math::exp(noise))));
        } else {
            current_statement_begin__ = 251;
            stan::math::assign(infections, add(infections, shifted_cases));
        }
        current_statement_begin__ = 253;
        return stan::math::promote_scalar<fun_return_scalar_t__>(infections);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct deconvolve_infections_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& shifted_cases,
                          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& noise,
                          const int& fixed, std::ostream* pstream__) const {
        return deconvolve_infections(shifted_cases, noise, fixed, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
void
generation_time_lp(const std::vector<T0__>& gt_mean,
                       const T1__& gt_mean_mean,
                       const T2__& gt_mean_sd,
                       const std::vector<T3__>& gt_sd,
                       const T4__& gt_sd_mean,
                       const T5__& gt_sd_sd,
                       const int& weight, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 258;
        lp_accum__.add((normal_log(get_base1(gt_mean, 1, "gt_mean", 1), gt_mean_mean, gt_mean_sd) * weight));
        current_statement_begin__ = 259;
        lp_accum__.add((normal_log(get_base1(gt_sd, 1, "gt_sd", 1), gt_sd_mean, gt_sd_sd) * weight));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct generation_time_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const std::vector<T0__>& gt_mean,
                       const T1__& gt_mean_mean,
                       const T2__& gt_mean_sd,
                       const std::vector<T3__>& gt_sd,
                       const T4__& gt_sd_mean,
                       const T5__& gt_sd_sd,
                       const int& weight, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return generation_time_lp(gt_mean, gt_mean_mean, gt_mean_sd, gt_sd, gt_sd_mean, gt_sd_sd, weight, lp__, lp_accum__, pstream__);
    }
};
template <typename T0__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
calculate_Rt(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& infections,
                 const int& seeding_time,
                 const T2__& gt_mean,
                 const T3__& gt_sd,
                 const int& max_gt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 264;
        validate_non_negative_index("gt_pmf", "max_gt", max_gt);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gt_pmf(max_gt);
        stan::math::initialize(gt_pmf, DUMMY_VAR__);
        stan::math::fill(gt_pmf, DUMMY_VAR__);
        current_statement_begin__ = 265;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(infections));
        current_statement_begin__ = 266;
        int ot(0);
        (void) ot;  // dummy to suppress unused var warning
        stan::math::fill(ot, std::numeric_limits<int>::min());
        stan::math::assign(ot,(t - seeding_time));
        current_statement_begin__ = 267;
        validate_non_negative_index("R", "ot", ot);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R(ot);
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        current_statement_begin__ = 268;
        validate_non_negative_index("infectiousness", "ot", ot);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infectiousness(ot);
        stan::math::initialize(infectiousness, DUMMY_VAR__);
        stan::math::fill(infectiousness, DUMMY_VAR__);
        stan::math::assign(infectiousness,rep_vector(1e-5, ot));
        current_statement_begin__ = 270;
        for (int j = 1; j <= max_gt; ++j) {
            current_statement_begin__ = 271;
            stan::model::assign(gt_pmf, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        discretised_gamma_pmf(((max_gt - j) + 1), gt_mean, gt_sd, max_gt, pstream__), 
                        "assigning variable gt_pmf");
        }
        current_statement_begin__ = 274;
        for (int s = 1; s <= ot; ++s) {
            current_statement_begin__ = 275;
            stan::model::assign(infectiousness, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        (stan::model::rvalue(infectiousness, stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), "infectiousness") + update_infectiousness(infections, gt_pmf, seeding_time, max_gt, s, pstream__)), 
                        "assigning variable infectiousness");
            current_statement_begin__ = 276;
            stan::model::assign(R, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        (get_base1(infections, (s + seeding_time), "infections", 1) / get_base1(infectiousness, s, "infectiousness", 1)), 
                        "assigning variable R");
        }
        current_statement_begin__ = 278;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct calculate_Rt_functor__ {
    template <typename T0__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& infections,
                 const int& seeding_time,
                 const T2__& gt_mean,
                 const T3__& gt_sd,
                 const int& max_gt, std::ostream* pstream__) const {
        return calculate_Rt(infections, seeding_time, gt_mean, gt_sd, max_gt, pstream__);
    }
};
template <typename T0__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
day_of_week_effect(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& reports,
                       const std::vector<int>& day_of_week,
                       const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& effect, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 282;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(reports));
        current_statement_begin__ = 284;
        validate_non_negative_index("scaled_effect", "7", 7);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> scaled_effect(7);
        stan::math::initialize(scaled_effect, DUMMY_VAR__);
        stan::math::fill(scaled_effect, DUMMY_VAR__);
        stan::math::assign(scaled_effect,multiply(7, effect));
        current_statement_begin__ = 285;
        validate_non_negative_index("scaled_reports", "t", t);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> scaled_reports(t);
        stan::math::initialize(scaled_reports, DUMMY_VAR__);
        stan::math::fill(scaled_reports, DUMMY_VAR__);
        current_statement_begin__ = 286;
        for (int s = 1; s <= t; ++s) {
            current_statement_begin__ = 288;
            stan::model::assign(scaled_reports, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        (get_base1(reports, s, "reports", 1) * get_base1(scaled_effect, get_base1(day_of_week, s, "day_of_week", 1), "scaled_effect", 1)), 
                        "assigning variable scaled_reports");
        }
        current_statement_begin__ = 290;
        return stan::math::promote_scalar<fun_return_scalar_t__>(scaled_reports);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct day_of_week_effect_functor__ {
    template <typename T0__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& reports,
                       const std::vector<int>& day_of_week,
                       const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& effect, std::ostream* pstream__) const {
        return day_of_week_effect(reports, day_of_week, effect, pstream__);
    }
};
template <typename T1__, typename T2__, typename T_lp__, typename T_lp_accum__>
void
report_lp(const std::vector<int>& cases,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& reports,
              const std::vector<T2__>& rep_phi,
              const int& phi_prior,
              const int& model_type,
              const int& horizon,
              const int& weight, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 298;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,(num_elements(reports) - horizon));
        current_statement_begin__ = 299;
        if (as_bool(model_type)) {
            current_statement_begin__ = 301;
            lp_accum__.add(exponential_log<propto__>(get_base1(rep_phi, model_type, "rep_phi", 1), phi_prior));
            current_statement_begin__ = 302;
            lp_accum__.add((neg_binomial_2_log(cases, stan::model::rvalue(reports, stan::model::cons_list(stan::model::index_min_max(1, t), stan::model::nil_index_list()), "reports"), get_base1(rep_phi, model_type, "rep_phi", 1)) * weight));
        } else {
            current_statement_begin__ = 304;
            lp_accum__.add((poisson_log(cases, stan::model::rvalue(reports, stan::model::cons_list(stan::model::index_min_max(1, t), stan::model::nil_index_list()), "reports")) * weight));
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct report_lp_functor__ {
    template <typename T1__, typename T2__, typename T_lp__, typename T_lp_accum__>
        void
    operator()(const std::vector<int>& cases,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& reports,
              const std::vector<T2__>& rep_phi,
              const int& phi_prior,
              const int& model_type,
              const int& horizon,
              const int& weight, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return report_lp(cases, reports, rep_phi, phi_prior, model_type, horizon, weight, lp__, lp_accum__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type>
R_to_growth(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& R,
                const T1__& gt_mean,
                const T2__& gt_sd, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 309;
        local_scalar_t__ k(DUMMY_VAR__);
        (void) k;  // dummy to suppress unused var warning
        stan::math::initialize(k, DUMMY_VAR__);
        stan::math::fill(k, DUMMY_VAR__);
        stan::math::assign(k,pow((gt_sd / gt_mean), 2));
        current_statement_begin__ = 310;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(R));
        current_statement_begin__ = 311;
        validate_non_negative_index("r", "t", t);
        std::vector<local_scalar_t__  > r(t, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        current_statement_begin__ = 312;
        for (int s = 1; s <= t; ++s) {
            current_statement_begin__ = 313;
            stan::model::assign(r, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        ((pow(get_base1(R, s, "R", 1), k) - 1) / (k * gt_mean)), 
                        "assigning variable r");
        }
        current_statement_begin__ = 315;
        return stan::math::promote_scalar<fun_return_scalar_t__>(r);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct R_to_growth_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& R,
                const T1__& gt_mean,
                const T2__& gt_sd, std::ostream* pstream__) const {
        return R_to_growth(R, gt_mean, gt_sd, pstream__);
    }
};
template <typename T0__, typename T1__, class RNG>
std::vector<int>
report_rng(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& reports,
               const std::vector<T1__>& rep_phi,
               const int& model_type, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 319;
        int t(0);
        (void) t;  // dummy to suppress unused var warning
        stan::math::fill(t, std::numeric_limits<int>::min());
        stan::math::assign(t,num_elements(reports));
        current_statement_begin__ = 320;
        validate_non_negative_index("sampled_reports", "t", t);
        std::vector<int  > sampled_reports(t, int(0));
        stan::math::fill(sampled_reports, std::numeric_limits<int>::min());
        current_statement_begin__ = 321;
        if (as_bool(model_type)) {
            current_statement_begin__ = 322;
            for (int s = 1; s <= t; ++s) {
                current_statement_begin__ = 323;
                stan::model::assign(sampled_reports, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            neg_binomial_2_rng((logical_gt(get_base1(reports, s, "reports", 1), 1e8) ? 1e8 : get_base1(reports, s, "reports", 1) ), get_base1(rep_phi, model_type, "rep_phi", 1), base_rng__), 
                            "assigning variable sampled_reports");
            }
        } else {
            current_statement_begin__ = 326;
            for (int s = 1; s <= t; ++s) {
                current_statement_begin__ = 327;
                stan::model::assign(sampled_reports, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            poisson_rng((logical_gt(get_base1(reports, s, "reports", 1), 1e8) ? 1e8 : get_base1(reports, s, "reports", 1) ), base_rng__), 
                            "assigning variable sampled_reports");
            }
        }
        current_statement_begin__ = 330;
        return stan::math::promote_scalar<fun_return_scalar_t__>(sampled_reports);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct report_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        std::vector<int>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& reports,
               const std::vector<T1__>& rep_phi,
               const int& model_type, RNG& base_rng__, std::ostream* pstream__) const {
        return report_rng(reports, rep_phi, model_type, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_estimate_infections
  : public stan::model::model_base_crtp<model_estimate_infections> {
private:
        int t;
        int seeding_time;
        int horizon;
        std::vector<int> cases;
        vector_d shifted_cases;
        int delays;
        std::vector<double> delay_mean_sd;
        std::vector<double> delay_mean_mean;
        std::vector<double> delay_sd_mean;
        std::vector<double> delay_sd_sd;
        std::vector<int> max_delay;
        double L;
        int M;
        double lengthscale_alpha;
        double lengthscale_beta;
        double alpha_sd;
        int stationary;
        int fixed;
        double gt_mean_sd;
        double gt_mean_mean;
        double gt_sd_mean;
        double gt_sd_sd;
        int max_gt;
        int estimate_r;
        double r_mean;
        double r_sd;
        int bp_n;
        std::vector<int> breakpoints;
        int future_fixed;
        int fixed_from;
        std::vector<int> day_of_week;
        int model_type;
        int week_effect;
        int ot;
        int ot_h;
        int noise_terms;
        matrix_d PHI;
        double r_logmean;
        double r_logsd;
public:
    model_estimate_infections(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_estimate_infections(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_estimate_infections_namespace::model_estimate_infections";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 338;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            current_statement_begin__ = 339;
            context__.validate_dims("data initialization", "seeding_time", "int", context__.to_vec());
            seeding_time = int(0);
            vals_i__ = context__.vals_i("seeding_time");
            pos__ = 0;
            seeding_time = vals_i__[pos__++];
            current_statement_begin__ = 340;
            context__.validate_dims("data initialization", "horizon", "int", context__.to_vec());
            horizon = int(0);
            vals_i__ = context__.vals_i("horizon");
            pos__ = 0;
            horizon = vals_i__[pos__++];
            current_statement_begin__ = 341;
            validate_non_negative_index("cases", "((t - horizon) - seeding_time)", ((t - horizon) - seeding_time));
            context__.validate_dims("data initialization", "cases", "int", context__.to_vec(((t - horizon) - seeding_time)));
            cases = std::vector<int>(((t - horizon) - seeding_time), int(0));
            vals_i__ = context__.vals_i("cases");
            pos__ = 0;
            size_t cases_k_0_max__ = ((t - horizon) - seeding_time);
            for (size_t k_0__ = 0; k_0__ < cases_k_0_max__; ++k_0__) {
                cases[k_0__] = vals_i__[pos__++];
            }
            size_t cases_i_0_max__ = ((t - horizon) - seeding_time);
            for (size_t i_0__ = 0; i_0__ < cases_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cases[i_0__]", cases[i_0__], 0);
            }
            current_statement_begin__ = 342;
            validate_non_negative_index("shifted_cases", "t", t);
            context__.validate_dims("data initialization", "shifted_cases", "vector_d", context__.to_vec(t));
            shifted_cases = Eigen::Matrix<double, Eigen::Dynamic, 1>(t);
            vals_r__ = context__.vals_r("shifted_cases");
            pos__ = 0;
            size_t shifted_cases_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < shifted_cases_j_1_max__; ++j_1__) {
                shifted_cases(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "shifted_cases", shifted_cases, 0);
            current_statement_begin__ = 343;
            context__.validate_dims("data initialization", "delays", "int", context__.to_vec());
            delays = int(0);
            vals_i__ = context__.vals_i("delays");
            pos__ = 0;
            delays = vals_i__[pos__++];
            current_statement_begin__ = 344;
            validate_non_negative_index("delay_mean_sd", "delays", delays);
            context__.validate_dims("data initialization", "delay_mean_sd", "double", context__.to_vec(delays));
            delay_mean_sd = std::vector<double>(delays, double(0));
            vals_r__ = context__.vals_r("delay_mean_sd");
            pos__ = 0;
            size_t delay_mean_sd_k_0_max__ = delays;
            for (size_t k_0__ = 0; k_0__ < delay_mean_sd_k_0_max__; ++k_0__) {
                delay_mean_sd[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 345;
            validate_non_negative_index("delay_mean_mean", "delays", delays);
            context__.validate_dims("data initialization", "delay_mean_mean", "double", context__.to_vec(delays));
            delay_mean_mean = std::vector<double>(delays, double(0));
            vals_r__ = context__.vals_r("delay_mean_mean");
            pos__ = 0;
            size_t delay_mean_mean_k_0_max__ = delays;
            for (size_t k_0__ = 0; k_0__ < delay_mean_mean_k_0_max__; ++k_0__) {
                delay_mean_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 346;
            validate_non_negative_index("delay_sd_mean", "delays", delays);
            context__.validate_dims("data initialization", "delay_sd_mean", "double", context__.to_vec(delays));
            delay_sd_mean = std::vector<double>(delays, double(0));
            vals_r__ = context__.vals_r("delay_sd_mean");
            pos__ = 0;
            size_t delay_sd_mean_k_0_max__ = delays;
            for (size_t k_0__ = 0; k_0__ < delay_sd_mean_k_0_max__; ++k_0__) {
                delay_sd_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 347;
            validate_non_negative_index("delay_sd_sd", "delays", delays);
            context__.validate_dims("data initialization", "delay_sd_sd", "double", context__.to_vec(delays));
            delay_sd_sd = std::vector<double>(delays, double(0));
            vals_r__ = context__.vals_r("delay_sd_sd");
            pos__ = 0;
            size_t delay_sd_sd_k_0_max__ = delays;
            for (size_t k_0__ = 0; k_0__ < delay_sd_sd_k_0_max__; ++k_0__) {
                delay_sd_sd[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 348;
            validate_non_negative_index("max_delay", "delays", delays);
            context__.validate_dims("data initialization", "max_delay", "int", context__.to_vec(delays));
            max_delay = std::vector<int>(delays, int(0));
            vals_i__ = context__.vals_i("max_delay");
            pos__ = 0;
            size_t max_delay_k_0_max__ = delays;
            for (size_t k_0__ = 0; k_0__ < max_delay_k_0_max__; ++k_0__) {
                max_delay[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 349;
            context__.validate_dims("data initialization", "L", "double", context__.to_vec());
            L = double(0);
            vals_r__ = context__.vals_r("L");
            pos__ = 0;
            L = vals_r__[pos__++];
            current_statement_begin__ = 350;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 351;
            context__.validate_dims("data initialization", "lengthscale_alpha", "double", context__.to_vec());
            lengthscale_alpha = double(0);
            vals_r__ = context__.vals_r("lengthscale_alpha");
            pos__ = 0;
            lengthscale_alpha = vals_r__[pos__++];
            current_statement_begin__ = 352;
            context__.validate_dims("data initialization", "lengthscale_beta", "double", context__.to_vec());
            lengthscale_beta = double(0);
            vals_r__ = context__.vals_r("lengthscale_beta");
            pos__ = 0;
            lengthscale_beta = vals_r__[pos__++];
            current_statement_begin__ = 353;
            context__.validate_dims("data initialization", "alpha_sd", "double", context__.to_vec());
            alpha_sd = double(0);
            vals_r__ = context__.vals_r("alpha_sd");
            pos__ = 0;
            alpha_sd = vals_r__[pos__++];
            current_statement_begin__ = 354;
            context__.validate_dims("data initialization", "stationary", "int", context__.to_vec());
            stationary = int(0);
            vals_i__ = context__.vals_i("stationary");
            pos__ = 0;
            stationary = vals_i__[pos__++];
            current_statement_begin__ = 355;
            context__.validate_dims("data initialization", "fixed", "int", context__.to_vec());
            fixed = int(0);
            vals_i__ = context__.vals_i("fixed");
            pos__ = 0;
            fixed = vals_i__[pos__++];
            current_statement_begin__ = 356;
            context__.validate_dims("data initialization", "gt_mean_sd", "double", context__.to_vec());
            gt_mean_sd = double(0);
            vals_r__ = context__.vals_r("gt_mean_sd");
            pos__ = 0;
            gt_mean_sd = vals_r__[pos__++];
            current_statement_begin__ = 357;
            context__.validate_dims("data initialization", "gt_mean_mean", "double", context__.to_vec());
            gt_mean_mean = double(0);
            vals_r__ = context__.vals_r("gt_mean_mean");
            pos__ = 0;
            gt_mean_mean = vals_r__[pos__++];
            current_statement_begin__ = 358;
            context__.validate_dims("data initialization", "gt_sd_mean", "double", context__.to_vec());
            gt_sd_mean = double(0);
            vals_r__ = context__.vals_r("gt_sd_mean");
            pos__ = 0;
            gt_sd_mean = vals_r__[pos__++];
            current_statement_begin__ = 359;
            context__.validate_dims("data initialization", "gt_sd_sd", "double", context__.to_vec());
            gt_sd_sd = double(0);
            vals_r__ = context__.vals_r("gt_sd_sd");
            pos__ = 0;
            gt_sd_sd = vals_r__[pos__++];
            current_statement_begin__ = 360;
            context__.validate_dims("data initialization", "max_gt", "int", context__.to_vec());
            max_gt = int(0);
            vals_i__ = context__.vals_i("max_gt");
            pos__ = 0;
            max_gt = vals_i__[pos__++];
            current_statement_begin__ = 361;
            context__.validate_dims("data initialization", "estimate_r", "int", context__.to_vec());
            estimate_r = int(0);
            vals_i__ = context__.vals_i("estimate_r");
            pos__ = 0;
            estimate_r = vals_i__[pos__++];
            current_statement_begin__ = 362;
            context__.validate_dims("data initialization", "r_mean", "double", context__.to_vec());
            r_mean = double(0);
            vals_r__ = context__.vals_r("r_mean");
            pos__ = 0;
            r_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "r_mean", r_mean, 0);
            current_statement_begin__ = 363;
            context__.validate_dims("data initialization", "r_sd", "double", context__.to_vec());
            r_sd = double(0);
            vals_r__ = context__.vals_r("r_sd");
            pos__ = 0;
            r_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "r_sd", r_sd, 0);
            current_statement_begin__ = 364;
            context__.validate_dims("data initialization", "bp_n", "int", context__.to_vec());
            bp_n = int(0);
            vals_i__ = context__.vals_i("bp_n");
            pos__ = 0;
            bp_n = vals_i__[pos__++];
            current_statement_begin__ = 365;
            validate_non_negative_index("breakpoints", "(t - seeding_time)", (t - seeding_time));
            context__.validate_dims("data initialization", "breakpoints", "int", context__.to_vec((t - seeding_time)));
            breakpoints = std::vector<int>((t - seeding_time), int(0));
            vals_i__ = context__.vals_i("breakpoints");
            pos__ = 0;
            size_t breakpoints_k_0_max__ = (t - seeding_time);
            for (size_t k_0__ = 0; k_0__ < breakpoints_k_0_max__; ++k_0__) {
                breakpoints[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 366;
            context__.validate_dims("data initialization", "future_fixed", "int", context__.to_vec());
            future_fixed = int(0);
            vals_i__ = context__.vals_i("future_fixed");
            pos__ = 0;
            future_fixed = vals_i__[pos__++];
            current_statement_begin__ = 367;
            context__.validate_dims("data initialization", "fixed_from", "int", context__.to_vec());
            fixed_from = int(0);
            vals_i__ = context__.vals_i("fixed_from");
            pos__ = 0;
            fixed_from = vals_i__[pos__++];
            current_statement_begin__ = 368;
            validate_non_negative_index("day_of_week", "(t - seeding_time)", (t - seeding_time));
            context__.validate_dims("data initialization", "day_of_week", "int", context__.to_vec((t - seeding_time)));
            day_of_week = std::vector<int>((t - seeding_time), int(0));
            vals_i__ = context__.vals_i("day_of_week");
            pos__ = 0;
            size_t day_of_week_k_0_max__ = (t - seeding_time);
            for (size_t k_0__ = 0; k_0__ < day_of_week_k_0_max__; ++k_0__) {
                day_of_week[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 369;
            context__.validate_dims("data initialization", "model_type", "int", context__.to_vec());
            model_type = int(0);
            vals_i__ = context__.vals_i("model_type");
            pos__ = 0;
            model_type = vals_i__[pos__++];
            current_statement_begin__ = 370;
            context__.validate_dims("data initialization", "week_effect", "int", context__.to_vec());
            week_effect = int(0);
            vals_i__ = context__.vals_i("week_effect");
            pos__ = 0;
            week_effect = vals_i__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 375;
            ot = int(0);
            stan::math::fill(ot, std::numeric_limits<int>::min());
            stan::math::assign(ot,((t - seeding_time) - horizon));
            current_statement_begin__ = 376;
            ot_h = int(0);
            stan::math::fill(ot_h, std::numeric_limits<int>::min());
            stan::math::assign(ot_h,(ot + horizon));
            current_statement_begin__ = 378;
            noise_terms = int(0);
            stan::math::fill(noise_terms, std::numeric_limits<int>::min());
            stan::math::assign(noise_terms,setup_noise(ot_h, t, horizon, estimate_r, stationary, future_fixed, fixed_from, pstream__));
            current_statement_begin__ = 379;
            validate_non_negative_index("PHI", "noise_terms", noise_terms);
            validate_non_negative_index("PHI", "M", M);
            PHI = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(noise_terms, M);
            stan::math::fill(PHI, DUMMY_VAR__);
            stan::math::assign(PHI,setup_gp(M, L, noise_terms, pstream__));
            current_statement_begin__ = 381;
            r_logmean = double(0);
            stan::math::fill(r_logmean, DUMMY_VAR__);
            stan::math::assign(r_logmean,stan::math::log((pow(r_mean, 2) / stan::math::sqrt((pow(r_sd, 2) + pow(r_mean, 2))))));
            current_statement_begin__ = 382;
            r_logsd = double(0);
            stan::math::fill(r_logsd, DUMMY_VAR__);
            stan::math::assign(r_logsd,stan::math::sqrt(stan::math::log((1 + (pow(r_sd, 2) / pow(r_mean, 2))))));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 387;
            validate_non_negative_index("rho", "(fixed ? 0 : 1 )", (fixed ? 0 : 1 ));
            num_params_r__ += (1 * (fixed ? 0 : 1 ));
            current_statement_begin__ = 388;
            validate_non_negative_index("alpha", "(fixed ? 0 : 1 )", (fixed ? 0 : 1 ));
            num_params_r__ += (1 * (fixed ? 0 : 1 ));
            current_statement_begin__ = 389;
            validate_non_negative_index("eta", "(fixed ? 0 : M )", (fixed ? 0 : M ));
            num_params_r__ += (fixed ? 0 : M );
            current_statement_begin__ = 391;
            validate_non_negative_index("log_R", "estimate_r", estimate_r);
            num_params_r__ += estimate_r;
            current_statement_begin__ = 392;
            validate_non_negative_index("initial_infections", "(logical_gt(estimate_r, 0) ? seeding_time : 0 )", (logical_gt(estimate_r, 0) ? seeding_time : 0 ));
            num_params_r__ += (logical_gt(estimate_r, 0) ? seeding_time : 0 );
            current_statement_begin__ = 393;
            validate_non_negative_index("gt_mean", "estimate_r", estimate_r);
            num_params_r__ += (1 * estimate_r);
            current_statement_begin__ = 394;
            validate_non_negative_index("gt_sd", "estimate_r", estimate_r);
            num_params_r__ += (1 * estimate_r);
            current_statement_begin__ = 395;
            validate_non_negative_index("bp_effects", "bp_n", bp_n);
            num_params_r__ += (1 * bp_n);
            current_statement_begin__ = 397;
            validate_non_negative_index("delay_mean", "delays", delays);
            num_params_r__ += (1 * delays);
            current_statement_begin__ = 398;
            validate_non_negative_index("delay_sd", "delays", delays);
            num_params_r__ += (1 * delays);
            current_statement_begin__ = 399;
            validate_non_negative_index("day_of_week_simplex", "(week_effect ? 7 : 1 )", (week_effect ? 7 : 1 ));
            num_params_r__ += ((week_effect ? 7 : 1 ) - 1);
            current_statement_begin__ = 400;
            validate_non_negative_index("rep_phi", "model_type", model_type);
            num_params_r__ += (1 * model_type);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_estimate_infections() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 387;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "(fixed ? 0 : 1 )", (fixed ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "rho", "double", context__.to_vec((fixed ? 0 : 1 )));
        std::vector<double> rho((fixed ? 0 : 1 ), double(0));
        size_t rho_k_0_max__ = (fixed ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            rho[k_0__] = vals_r__[pos__++];
        }
        size_t rho_i_0_max__ = (fixed ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < rho_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, rho[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 388;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "(fixed ? 0 : 1 )", (fixed ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec((fixed ? 0 : 1 )));
        std::vector<double> alpha((fixed ? 0 : 1 ), double(0));
        size_t alpha_k_0_max__ = (fixed ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = (fixed ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 389;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "(fixed ? 0 : M )", (fixed ? 0 : M ));
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec((fixed ? 0 : M )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta((fixed ? 0 : M ));
        size_t eta_j_1_max__ = (fixed ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 391;
        if (!(context__.contains_r("log_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_R");
        pos__ = 0U;
        validate_non_negative_index("log_R", "estimate_r", estimate_r);
        context__.validate_dims("parameter initialization", "log_R", "vector_d", context__.to_vec(estimate_r));
        Eigen::Matrix<double, Eigen::Dynamic, 1> log_R(estimate_r);
        size_t log_R_j_1_max__ = estimate_r;
        for (size_t j_1__ = 0; j_1__ < log_R_j_1_max__; ++j_1__) {
            log_R(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(log_R);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_R: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 392;
        if (!(context__.contains_r("initial_infections")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable initial_infections missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("initial_infections");
        pos__ = 0U;
        validate_non_negative_index("initial_infections", "(logical_gt(estimate_r, 0) ? seeding_time : 0 )", (logical_gt(estimate_r, 0) ? seeding_time : 0 ));
        context__.validate_dims("parameter initialization", "initial_infections", "vector_d", context__.to_vec((logical_gt(estimate_r, 0) ? seeding_time : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> initial_infections((logical_gt(estimate_r, 0) ? seeding_time : 0 ));
        size_t initial_infections_j_1_max__ = (logical_gt(estimate_r, 0) ? seeding_time : 0 );
        for (size_t j_1__ = 0; j_1__ < initial_infections_j_1_max__; ++j_1__) {
            initial_infections(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(initial_infections);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable initial_infections: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 393;
        if (!(context__.contains_r("gt_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gt_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gt_mean");
        pos__ = 0U;
        validate_non_negative_index("gt_mean", "estimate_r", estimate_r);
        context__.validate_dims("parameter initialization", "gt_mean", "double", context__.to_vec(estimate_r));
        std::vector<double> gt_mean(estimate_r, double(0));
        size_t gt_mean_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_mean_k_0_max__; ++k_0__) {
            gt_mean[k_0__] = vals_r__[pos__++];
        }
        size_t gt_mean_i_0_max__ = estimate_r;
        for (size_t i_0__ = 0; i_0__ < gt_mean_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, gt_mean[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gt_mean: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 394;
        if (!(context__.contains_r("gt_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gt_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gt_sd");
        pos__ = 0U;
        validate_non_negative_index("gt_sd", "estimate_r", estimate_r);
        context__.validate_dims("parameter initialization", "gt_sd", "double", context__.to_vec(estimate_r));
        std::vector<double> gt_sd(estimate_r, double(0));
        size_t gt_sd_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_sd_k_0_max__; ++k_0__) {
            gt_sd[k_0__] = vals_r__[pos__++];
        }
        size_t gt_sd_i_0_max__ = estimate_r;
        for (size_t i_0__ = 0; i_0__ < gt_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, gt_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gt_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 395;
        if (!(context__.contains_r("bp_effects")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable bp_effects missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("bp_effects");
        pos__ = 0U;
        validate_non_negative_index("bp_effects", "bp_n", bp_n);
        context__.validate_dims("parameter initialization", "bp_effects", "double", context__.to_vec(bp_n));
        std::vector<double> bp_effects(bp_n, double(0));
        size_t bp_effects_k_0_max__ = bp_n;
        for (size_t k_0__ = 0; k_0__ < bp_effects_k_0_max__; ++k_0__) {
            bp_effects[k_0__] = vals_r__[pos__++];
        }
        size_t bp_effects_i_0_max__ = bp_n;
        for (size_t i_0__ = 0; i_0__ < bp_effects_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(bp_effects[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable bp_effects: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 397;
        if (!(context__.contains_r("delay_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delay_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delay_mean");
        pos__ = 0U;
        validate_non_negative_index("delay_mean", "delays", delays);
        context__.validate_dims("parameter initialization", "delay_mean", "double", context__.to_vec(delays));
        std::vector<double> delay_mean(delays, double(0));
        size_t delay_mean_k_0_max__ = delays;
        for (size_t k_0__ = 0; k_0__ < delay_mean_k_0_max__; ++k_0__) {
            delay_mean[k_0__] = vals_r__[pos__++];
        }
        size_t delay_mean_i_0_max__ = delays;
        for (size_t i_0__ = 0; i_0__ < delay_mean_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, delay_mean[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delay_mean: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 398;
        if (!(context__.contains_r("delay_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delay_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delay_sd");
        pos__ = 0U;
        validate_non_negative_index("delay_sd", "delays", delays);
        context__.validate_dims("parameter initialization", "delay_sd", "double", context__.to_vec(delays));
        std::vector<double> delay_sd(delays, double(0));
        size_t delay_sd_k_0_max__ = delays;
        for (size_t k_0__ = 0; k_0__ < delay_sd_k_0_max__; ++k_0__) {
            delay_sd[k_0__] = vals_r__[pos__++];
        }
        size_t delay_sd_i_0_max__ = delays;
        for (size_t i_0__ = 0; i_0__ < delay_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, delay_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delay_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 399;
        if (!(context__.contains_r("day_of_week_simplex")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable day_of_week_simplex missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("day_of_week_simplex");
        pos__ = 0U;
        validate_non_negative_index("day_of_week_simplex", "(week_effect ? 7 : 1 )", (week_effect ? 7 : 1 ));
        context__.validate_dims("parameter initialization", "day_of_week_simplex", "vector_d", context__.to_vec((week_effect ? 7 : 1 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> day_of_week_simplex((week_effect ? 7 : 1 ));
        size_t day_of_week_simplex_j_1_max__ = (week_effect ? 7 : 1 );
        for (size_t j_1__ = 0; j_1__ < day_of_week_simplex_j_1_max__; ++j_1__) {
            day_of_week_simplex(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(day_of_week_simplex);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable day_of_week_simplex: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 400;
        if (!(context__.contains_r("rep_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rep_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rep_phi");
        pos__ = 0U;
        validate_non_negative_index("rep_phi", "model_type", model_type);
        context__.validate_dims("parameter initialization", "rep_phi", "double", context__.to_vec(model_type));
        std::vector<double> rep_phi(model_type, double(0));
        size_t rep_phi_k_0_max__ = model_type;
        for (size_t k_0__ = 0; k_0__ < rep_phi_k_0_max__; ++k_0__) {
            rep_phi[k_0__] = vals_r__[pos__++];
        }
        size_t rep_phi_i_0_max__ = model_type;
        for (size_t i_0__ = 0; i_0__ < rep_phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, rep_phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rep_phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 387;
            std::vector<local_scalar_t__> rho;
            size_t rho_d_0_max__ = (fixed ? 0 : 1 );
            rho.reserve(rho_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < rho_d_0_max__; ++d_0__) {
                if (jacobian__)
                    rho.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    rho.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 388;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = (fixed ? 0 : 1 );
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 389;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_constrain((fixed ? 0 : M ), lp__);
            else
                eta = in__.vector_constrain((fixed ? 0 : M ));
            current_statement_begin__ = 391;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_R;
            (void) log_R;  // dummy to suppress unused var warning
            if (jacobian__)
                log_R = in__.vector_constrain(estimate_r, lp__);
            else
                log_R = in__.vector_constrain(estimate_r);
            current_statement_begin__ = 392;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> initial_infections;
            (void) initial_infections;  // dummy to suppress unused var warning
            if (jacobian__)
                initial_infections = in__.vector_constrain((logical_gt(estimate_r, 0) ? seeding_time : 0 ), lp__);
            else
                initial_infections = in__.vector_constrain((logical_gt(estimate_r, 0) ? seeding_time : 0 ));
            current_statement_begin__ = 393;
            std::vector<local_scalar_t__> gt_mean;
            size_t gt_mean_d_0_max__ = estimate_r;
            gt_mean.reserve(gt_mean_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gt_mean_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gt_mean.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    gt_mean.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 394;
            std::vector<local_scalar_t__> gt_sd;
            size_t gt_sd_d_0_max__ = estimate_r;
            gt_sd.reserve(gt_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gt_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gt_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    gt_sd.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 395;
            std::vector<local_scalar_t__> bp_effects;
            size_t bp_effects_d_0_max__ = bp_n;
            bp_effects.reserve(bp_effects_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < bp_effects_d_0_max__; ++d_0__) {
                if (jacobian__)
                    bp_effects.push_back(in__.scalar_constrain(lp__));
                else
                    bp_effects.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 397;
            std::vector<local_scalar_t__> delay_mean;
            size_t delay_mean_d_0_max__ = delays;
            delay_mean.reserve(delay_mean_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delay_mean_d_0_max__; ++d_0__) {
                if (jacobian__)
                    delay_mean.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    delay_mean.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 398;
            std::vector<local_scalar_t__> delay_sd;
            size_t delay_sd_d_0_max__ = delays;
            delay_sd.reserve(delay_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delay_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    delay_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    delay_sd.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 399;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> day_of_week_simplex;
            (void) day_of_week_simplex;  // dummy to suppress unused var warning
            if (jacobian__)
                day_of_week_simplex = in__.simplex_constrain((week_effect ? 7 : 1 ), lp__);
            else
                day_of_week_simplex = in__.simplex_constrain((week_effect ? 7 : 1 ));
            current_statement_begin__ = 400;
            std::vector<local_scalar_t__> rep_phi;
            size_t rep_phi_d_0_max__ = model_type;
            rep_phi.reserve(rep_phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < rep_phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    rep_phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    rep_phi.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 404;
            validate_non_negative_index("noise", "(fixed ? 0 : noise_terms )", (fixed ? 0 : noise_terms ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> noise((fixed ? 0 : noise_terms ));
            stan::math::initialize(noise, DUMMY_VAR__);
            stan::math::fill(noise, DUMMY_VAR__);
            current_statement_begin__ = 405;
            validate_non_negative_index("R", "(logical_gt(estimate_r, 0) ? ot_h : 0 )", (logical_gt(estimate_r, 0) ? ot_h : 0 ));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R((logical_gt(estimate_r, 0) ? ot_h : 0 ));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 406;
            validate_non_negative_index("infections", "t", t);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> infections(t);
            stan::math::initialize(infections, DUMMY_VAR__);
            stan::math::fill(infections, DUMMY_VAR__);
            current_statement_begin__ = 407;
            validate_non_negative_index("reports", "ot_h", ot_h);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> reports(ot_h);
            stan::math::initialize(reports, DUMMY_VAR__);
            stan::math::fill(reports, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 409;
            if (as_bool(logical_negation(fixed))) {
                current_statement_begin__ = 410;
                stan::math::assign(noise, update_gp(PHI, M, L, get_base1(alpha, 1, "alpha", 1), get_base1(rho, 1, "rho", 1), eta, pstream__));
            }
            current_statement_begin__ = 413;
            if (as_bool(estimate_r)) {
                current_statement_begin__ = 415;
                stan::math::assign(R, update_Rt(R, get_base1(log_R, estimate_r, "log_R", 1), noise, breakpoints, bp_effects, stationary, pstream__));
                current_statement_begin__ = 416;
                stan::math::assign(infections, generate_infections(R, seeding_time, gt_mean, gt_sd, max_gt, shifted_cases, initial_infections, pstream__));
            } else {
                current_statement_begin__ = 419;
                stan::math::assign(infections, deconvolve_infections(shifted_cases, noise, fixed, pstream__));
            }
            current_statement_begin__ = 422;
            stan::math::assign(reports, convolve_to_report(infections, delay_mean, delay_sd, max_delay, seeding_time, pstream__));
            current_statement_begin__ = 424;
            if (as_bool(week_effect)) {
                current_statement_begin__ = 425;
                stan::math::assign(reports, day_of_week_effect(reports, day_of_week, day_of_week_simplex, pstream__));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 404;
            size_t noise_j_1_max__ = (fixed ? 0 : noise_terms );
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(noise(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: noise" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable noise: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 405;
            size_t R_j_1_max__ = (logical_gt(estimate_r, 0) ? ot_h : 0 );
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(R(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: R" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 406;
            size_t infections_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(infections(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: infections" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable infections: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 407;
            size_t reports_j_1_max__ = ot_h;
            for (size_t j_1__ = 0; j_1__ < reports_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(reports(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: reports" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable reports: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 431;
            if (as_bool(logical_negation(fixed))) {
                current_statement_begin__ = 432;
                gaussian_process_lp(rho, alpha, eta, lengthscale_alpha, lengthscale_beta, alpha_sd, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 435;
            delays_lp(delay_mean, delay_mean_mean, delay_mean_sd, delay_sd, delay_sd_mean, delay_sd_sd, t, lp__, lp_accum__, pstream__);
            current_statement_begin__ = 437;
            if (as_bool(estimate_r)) {
                current_statement_begin__ = 439;
                lp_accum__.add(normal_log<propto__>(log_R, r_logmean, r_logsd));
                current_statement_begin__ = 441;
                if (as_bool(logical_gt(bp_n, 0))) {
                    current_statement_begin__ = 442;
                    lp_accum__.add(normal_log<propto__>(bp_effects, 0, 0.1));
                }
                current_statement_begin__ = 445;
                lp_accum__.add(lognormal_log<propto__>(initial_infections, 0, 0.1));
                current_statement_begin__ = 447;
                generation_time_lp(gt_mean, gt_mean_mean, gt_mean_sd, gt_sd, gt_sd_mean, gt_sd_sd, ot, lp__, lp_accum__, pstream__);
            }
            current_statement_begin__ = 450;
            report_lp(cases, reports, rep_phi, 1, model_type, horizon, 1, lp__, lp_accum__, pstream__);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("rho");
        names__.push_back("alpha");
        names__.push_back("eta");
        names__.push_back("log_R");
        names__.push_back("initial_infections");
        names__.push_back("gt_mean");
        names__.push_back("gt_sd");
        names__.push_back("bp_effects");
        names__.push_back("delay_mean");
        names__.push_back("delay_sd");
        names__.push_back("day_of_week_simplex");
        names__.push_back("rep_phi");
        names__.push_back("noise");
        names__.push_back("R");
        names__.push_back("infections");
        names__.push_back("reports");
        names__.push_back("imputed_reports");
        names__.push_back("gen_R");
        names__.push_back("r");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((fixed ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fixed ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fixed ? 0 : M ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(estimate_r, 0) ? seeding_time : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(estimate_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(bp_n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(delays);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(delays);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((week_effect ? 7 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(model_type);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fixed ? 0 : noise_terms ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(estimate_r, 0) ? ot_h : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ot_h);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ot_h);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_gt(estimate_r, 0) ? 0 : ot_h ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ot_h);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_estimate_infections_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> rho;
        size_t rho_d_0_max__ = (fixed ? 0 : 1 );
        rho.reserve(rho_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < rho_d_0_max__; ++d_0__) {
            rho.push_back(in__.scalar_lb_constrain(0));
        }
        size_t rho_k_0_max__ = (fixed ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            vars__.push_back(rho[k_0__]);
        }
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = (fixed ? 0 : 1 );
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_k_0_max__ = (fixed ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_constrain((fixed ? 0 : M ));
        size_t eta_j_1_max__ = (fixed ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> log_R = in__.vector_constrain(estimate_r);
        size_t log_R_j_1_max__ = estimate_r;
        for (size_t j_1__ = 0; j_1__ < log_R_j_1_max__; ++j_1__) {
            vars__.push_back(log_R(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> initial_infections = in__.vector_constrain((logical_gt(estimate_r, 0) ? seeding_time : 0 ));
        size_t initial_infections_j_1_max__ = (logical_gt(estimate_r, 0) ? seeding_time : 0 );
        for (size_t j_1__ = 0; j_1__ < initial_infections_j_1_max__; ++j_1__) {
            vars__.push_back(initial_infections(j_1__));
        }
        std::vector<double> gt_mean;
        size_t gt_mean_d_0_max__ = estimate_r;
        gt_mean.reserve(gt_mean_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gt_mean_d_0_max__; ++d_0__) {
            gt_mean.push_back(in__.scalar_lb_constrain(0));
        }
        size_t gt_mean_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_mean_k_0_max__; ++k_0__) {
            vars__.push_back(gt_mean[k_0__]);
        }
        std::vector<double> gt_sd;
        size_t gt_sd_d_0_max__ = estimate_r;
        gt_sd.reserve(gt_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gt_sd_d_0_max__; ++d_0__) {
            gt_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t gt_sd_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_sd_k_0_max__; ++k_0__) {
            vars__.push_back(gt_sd[k_0__]);
        }
        std::vector<double> bp_effects;
        size_t bp_effects_d_0_max__ = bp_n;
        bp_effects.reserve(bp_effects_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < bp_effects_d_0_max__; ++d_0__) {
            bp_effects.push_back(in__.scalar_constrain());
        }
        size_t bp_effects_k_0_max__ = bp_n;
        for (size_t k_0__ = 0; k_0__ < bp_effects_k_0_max__; ++k_0__) {
            vars__.push_back(bp_effects[k_0__]);
        }
        std::vector<double> delay_mean;
        size_t delay_mean_d_0_max__ = delays;
        delay_mean.reserve(delay_mean_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delay_mean_d_0_max__; ++d_0__) {
            delay_mean.push_back(in__.scalar_lb_constrain(0));
        }
        size_t delay_mean_k_0_max__ = delays;
        for (size_t k_0__ = 0; k_0__ < delay_mean_k_0_max__; ++k_0__) {
            vars__.push_back(delay_mean[k_0__]);
        }
        std::vector<double> delay_sd;
        size_t delay_sd_d_0_max__ = delays;
        delay_sd.reserve(delay_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delay_sd_d_0_max__; ++d_0__) {
            delay_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t delay_sd_k_0_max__ = delays;
        for (size_t k_0__ = 0; k_0__ < delay_sd_k_0_max__; ++k_0__) {
            vars__.push_back(delay_sd[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> day_of_week_simplex = in__.simplex_constrain((week_effect ? 7 : 1 ));
        size_t day_of_week_simplex_j_1_max__ = (week_effect ? 7 : 1 );
        for (size_t j_1__ = 0; j_1__ < day_of_week_simplex_j_1_max__; ++j_1__) {
            vars__.push_back(day_of_week_simplex(j_1__));
        }
        std::vector<double> rep_phi;
        size_t rep_phi_d_0_max__ = model_type;
        rep_phi.reserve(rep_phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < rep_phi_d_0_max__; ++d_0__) {
            rep_phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t rep_phi_k_0_max__ = model_type;
        for (size_t k_0__ = 0; k_0__ < rep_phi_k_0_max__; ++k_0__) {
            vars__.push_back(rep_phi[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 404;
            validate_non_negative_index("noise", "(fixed ? 0 : noise_terms )", (fixed ? 0 : noise_terms ));
            Eigen::Matrix<double, Eigen::Dynamic, 1> noise((fixed ? 0 : noise_terms ));
            stan::math::initialize(noise, DUMMY_VAR__);
            stan::math::fill(noise, DUMMY_VAR__);
            current_statement_begin__ = 405;
            validate_non_negative_index("R", "(logical_gt(estimate_r, 0) ? ot_h : 0 )", (logical_gt(estimate_r, 0) ? ot_h : 0 ));
            Eigen::Matrix<double, Eigen::Dynamic, 1> R((logical_gt(estimate_r, 0) ? ot_h : 0 ));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 406;
            validate_non_negative_index("infections", "t", t);
            Eigen::Matrix<double, Eigen::Dynamic, 1> infections(t);
            stan::math::initialize(infections, DUMMY_VAR__);
            stan::math::fill(infections, DUMMY_VAR__);
            current_statement_begin__ = 407;
            validate_non_negative_index("reports", "ot_h", ot_h);
            Eigen::Matrix<double, Eigen::Dynamic, 1> reports(ot_h);
            stan::math::initialize(reports, DUMMY_VAR__);
            stan::math::fill(reports, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 409;
            if (as_bool(logical_negation(fixed))) {
                current_statement_begin__ = 410;
                stan::math::assign(noise, update_gp(PHI, M, L, get_base1(alpha, 1, "alpha", 1), get_base1(rho, 1, "rho", 1), eta, pstream__));
            }
            current_statement_begin__ = 413;
            if (as_bool(estimate_r)) {
                current_statement_begin__ = 415;
                stan::math::assign(R, update_Rt(R, get_base1(log_R, estimate_r, "log_R", 1), noise, breakpoints, bp_effects, stationary, pstream__));
                current_statement_begin__ = 416;
                stan::math::assign(infections, generate_infections(R, seeding_time, gt_mean, gt_sd, max_gt, shifted_cases, initial_infections, pstream__));
            } else {
                current_statement_begin__ = 419;
                stan::math::assign(infections, deconvolve_infections(shifted_cases, noise, fixed, pstream__));
            }
            current_statement_begin__ = 422;
            stan::math::assign(reports, convolve_to_report(infections, delay_mean, delay_sd, max_delay, seeding_time, pstream__));
            current_statement_begin__ = 424;
            if (as_bool(week_effect)) {
                current_statement_begin__ = 425;
                stan::math::assign(reports, day_of_week_effect(reports, day_of_week, day_of_week_simplex, pstream__));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t noise_j_1_max__ = (fixed ? 0 : noise_terms );
                for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                    vars__.push_back(noise(j_1__));
                }
                size_t R_j_1_max__ = (logical_gt(estimate_r, 0) ? ot_h : 0 );
                for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                    vars__.push_back(R(j_1__));
                }
                size_t infections_j_1_max__ = t;
                for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                    vars__.push_back(infections(j_1__));
                }
                size_t reports_j_1_max__ = ot_h;
                for (size_t j_1__ = 0; j_1__ < reports_j_1_max__; ++j_1__) {
                    vars__.push_back(reports(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 454;
            validate_non_negative_index("imputed_reports", "ot_h", ot_h);
            std::vector<int> imputed_reports(ot_h, int(0));
            stan::math::fill(imputed_reports, std::numeric_limits<int>::min());
            current_statement_begin__ = 455;
            validate_non_negative_index("gen_R", "(logical_gt(estimate_r, 0) ? 0 : ot_h )", (logical_gt(estimate_r, 0) ? 0 : ot_h ));
            Eigen::Matrix<double, Eigen::Dynamic, 1> gen_R((logical_gt(estimate_r, 0) ? 0 : ot_h ));
            stan::math::initialize(gen_R, DUMMY_VAR__);
            stan::math::fill(gen_R, DUMMY_VAR__);
            current_statement_begin__ = 456;
            validate_non_negative_index("r", "ot_h", ot_h);
            std::vector<double> r(ot_h, double(0));
            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 457;
            if (as_bool(estimate_r)) {
                current_statement_begin__ = 459;
                stan::math::assign(r, R_to_growth(R, get_base1(gt_mean, 1, "gt_mean", 1), get_base1(gt_sd, 1, "gt_sd", 1), pstream__));
            } else {
                {
                current_statement_begin__ = 462;
                local_scalar_t__ gt_mean_sample(DUMMY_VAR__);
                (void) gt_mean_sample;  // dummy to suppress unused var warning
                stan::math::initialize(gt_mean_sample, DUMMY_VAR__);
                stan::math::fill(gt_mean_sample, DUMMY_VAR__);
                stan::math::assign(gt_mean_sample,normal_rng(gt_mean_mean, gt_mean_sd, base_rng__));
                current_statement_begin__ = 463;
                local_scalar_t__ gt_sd_sample(DUMMY_VAR__);
                (void) gt_sd_sample;  // dummy to suppress unused var warning
                stan::math::initialize(gt_sd_sample, DUMMY_VAR__);
                stan::math::fill(gt_sd_sample, DUMMY_VAR__);
                stan::math::assign(gt_sd_sample,normal_rng(gt_sd_mean, gt_sd_sd, base_rng__));
                current_statement_begin__ = 465;
                stan::math::assign(gen_R, calculate_Rt(infections, seeding_time, gt_mean_sample, gt_mean_sample, max_gt, pstream__));
                current_statement_begin__ = 467;
                stan::math::assign(r, R_to_growth(gen_R, gt_mean_sample, gt_sd_sample, pstream__));
                }
            }
            current_statement_begin__ = 470;
            stan::math::assign(imputed_reports, report_rng(reports, rep_phi, model_type, base_rng__, pstream__));
            // validate, write generated quantities
            current_statement_begin__ = 454;
            size_t imputed_reports_k_0_max__ = ot_h;
            for (size_t k_0__ = 0; k_0__ < imputed_reports_k_0_max__; ++k_0__) {
                vars__.push_back(imputed_reports[k_0__]);
            }
            current_statement_begin__ = 455;
            size_t gen_R_j_1_max__ = (logical_gt(estimate_r, 0) ? 0 : ot_h );
            for (size_t j_1__ = 0; j_1__ < gen_R_j_1_max__; ++j_1__) {
                vars__.push_back(gen_R(j_1__));
            }
            current_statement_begin__ = 456;
            size_t r_k_0_max__ = ot_h;
            for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
                vars__.push_back(r[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_estimate_infections";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t rho_k_0_max__ = (fixed ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_k_0_max__ = (fixed ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = (fixed ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_R_j_1_max__ = estimate_r;
        for (size_t j_1__ = 0; j_1__ < log_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t initial_infections_j_1_max__ = (logical_gt(estimate_r, 0) ? seeding_time : 0 );
        for (size_t j_1__ = 0; j_1__ < initial_infections_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "initial_infections" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gt_mean_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gt_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gt_sd_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gt_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t bp_effects_k_0_max__ = bp_n;
        for (size_t k_0__ = 0; k_0__ < bp_effects_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bp_effects" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delay_mean_k_0_max__ = delays;
        for (size_t k_0__ = 0; k_0__ < delay_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delay_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delay_sd_k_0_max__ = delays;
        for (size_t k_0__ = 0; k_0__ < delay_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delay_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t day_of_week_simplex_j_1_max__ = (week_effect ? 7 : 1 );
        for (size_t j_1__ = 0; j_1__ < day_of_week_simplex_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "day_of_week_simplex" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rep_phi_k_0_max__ = model_type;
        for (size_t k_0__ = 0; k_0__ < rep_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rep_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t noise_j_1_max__ = (fixed ? 0 : noise_terms );
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_j_1_max__ = (logical_gt(estimate_r, 0) ? ot_h : 0 );
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t infections_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reports_j_1_max__ = ot_h;
            for (size_t j_1__ = 0; j_1__ < reports_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reports" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t imputed_reports_k_0_max__ = ot_h;
        for (size_t k_0__ = 0; k_0__ < imputed_reports_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "imputed_reports" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gen_R_j_1_max__ = (logical_gt(estimate_r, 0) ? 0 : ot_h );
        for (size_t j_1__ = 0; j_1__ < gen_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gen_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t r_k_0_max__ = ot_h;
        for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t rho_k_0_max__ = (fixed ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_k_0_max__ = (fixed ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = (fixed ? 0 : M );
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_R_j_1_max__ = estimate_r;
        for (size_t j_1__ = 0; j_1__ < log_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t initial_infections_j_1_max__ = (logical_gt(estimate_r, 0) ? seeding_time : 0 );
        for (size_t j_1__ = 0; j_1__ < initial_infections_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "initial_infections" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gt_mean_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gt_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gt_sd_k_0_max__ = estimate_r;
        for (size_t k_0__ = 0; k_0__ < gt_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gt_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t bp_effects_k_0_max__ = bp_n;
        for (size_t k_0__ = 0; k_0__ < bp_effects_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bp_effects" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delay_mean_k_0_max__ = delays;
        for (size_t k_0__ = 0; k_0__ < delay_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delay_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delay_sd_k_0_max__ = delays;
        for (size_t k_0__ = 0; k_0__ < delay_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delay_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t day_of_week_simplex_j_1_max__ = ((week_effect ? 7 : 1 ) - 1);
        for (size_t j_1__ = 0; j_1__ < day_of_week_simplex_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "day_of_week_simplex" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rep_phi_k_0_max__ = model_type;
        for (size_t k_0__ = 0; k_0__ < rep_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rep_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t noise_j_1_max__ = (fixed ? 0 : noise_terms );
            for (size_t j_1__ = 0; j_1__ < noise_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "noise" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t R_j_1_max__ = (logical_gt(estimate_r, 0) ? ot_h : 0 );
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t infections_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < infections_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "infections" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t reports_j_1_max__ = ot_h;
            for (size_t j_1__ = 0; j_1__ < reports_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "reports" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t imputed_reports_k_0_max__ = ot_h;
        for (size_t k_0__ = 0; k_0__ < imputed_reports_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "imputed_reports" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gen_R_j_1_max__ = (logical_gt(estimate_r, 0) ? 0 : ot_h );
        for (size_t j_1__ = 0; j_1__ < gen_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gen_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t r_k_0_max__ = ot_h;
        for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_estimate_infections_namespace::model_estimate_infections stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
