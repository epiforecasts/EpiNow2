functions {
#include functions/convolve.stan
#include functions/pmfs.stan
#include functions/delays.stan
#include functions/gaussian_process.stan
#include functions/rt.stan
#include functions/infections.stan
#include functions/observation_model.stan
#include functions/generated_quantities.stan
}


data {
#include data/observations.stan
#include data/delays.stan
#include data/gaussian_process.stan
#include data/rt.stan
#include data/backcalc.stan
#include data/observation_model.stan
}

transformed data{
  // observations
  int ot = t - seeding_time - horizon;  // observed time
  int ot_h = ot + horizon;  // observed time + forecast horizon
  // gaussian process
  int noise_terms = setup_noise(ot_h, t, horizon, estimate_r, stationary, future_fixed, fixed_from);
  matrix[noise_terms, M] PHI = setup_gp(M, L, noise_terms);  // basis function
  // Rt
  real r_logmean = log(r_mean^2 / sqrt(r_sd^2 + r_mean^2));
  real r_logsd = sqrt(log(1 + (r_sd^2 / r_mean^2)));

#include chunks/delay_type_max.stan
}

parameters{
#include params/delays.stan
#include params/observation_model.stan
  // gaussian process
  array[fixed ? 0 : 1] real<lower = ls_min,upper=ls_max> rho;  // length scale of noise GP
  array[fixed ? 0 : 1] real<lower = 0> alpha;    // scale of of noise GP
  vector[fixed ? 0 : M] eta;               // unconstrained noise
  // Rt
  vector[estimate_r] log_R;                // baseline reproduction number estimate (log)
  array[estimate_r] real initial_infections ;    // seed infections
  array[estimate_r && seeding_time > 1 ? 1 : 0] real initial_growth; // seed growth rate
  array[bp_n > 0 ? 1 : 0] real<lower = 0> bp_sd; // standard deviation of breakpoint effect
  array[bp_n] real bp_effects;                   // Rt breakpoint effects
}

transformed parameters {
  vector[fixed ? 0 : noise_terms] noise;                    // noise  generated by the gaussian process
  vector<lower = 0, upper = 10 * r_mean>[estimate_r > 0 ? ot_h : 0] R; // reproduction number
  vector[t] infections;                                     // latent infections
  vector[ot_h] reports;                                     // estimated reported cases
  vector[ot] obs_reports;                                   // observed estimated reported cases
  // GP in noise - spectral densities
  if (!fixed) {
    noise = update_gp(PHI, M, L, alpha[1], rho[1], eta, gp_type);
  }
  // Estimate latent infections
  if (estimate_r) {
#include chunks/gt_rev_pmf.stan
    R = update_Rt(
      ot_h, log_R[estimate_r], noise, breakpoints, bp_effects, stationary
    );
#include chunks/generate_infections.stan
  } else {
    // via deconvolution
    infections = deconvolve_infections(
      shifted_cases, noise, fixed, backcalc_prior
    );
  }
  // convolve from latent infections to mean of observations
  {
#include chunks/delay_rev_pmf.stan
#include chunks/convolve_to_report.stan
  }
  // weekly reporting effect
#include chunks/day_of_week_effect.stan
  // scaling of reported cases by fraction observed
#include chunks/scale_obs.stan
 // truncate near time cases to observed reports
  {
#include chunks/trunc_rev_cmf.stan
    obs_reports = truncate(reports[1:ot], trunc_rev_cmf, 0);
  }
}

model {
  // priors for noise GP
  if (!fixed) {
    gaussian_process_lp(
      rho[1], alpha[1], eta, ls_meanlog, ls_sdlog, ls_min, ls_max, alpha_sd
    );
  }
  // penalised priors for delay distributions
#include chunks/delays_lp.stan
  if (estimate_r) {
    // priors on Rt
    rt_lp(
      log_R, initial_infections, initial_growth, bp_effects, bp_sd, bp_n,
      seeding_time, r_logmean, r_logsd, prior_infections, prior_growth
    );
  }
  // prior observation scaling
#include chunks/obs_scale_lp.stan
  // observed reports from mean of reports (update likelihood)
  if (likelihood) {
#include chunks/report_lp.stan
  }
}

generated quantities {
  array[ot_h] int imputed_reports;
  vector[estimate_r > 0 ? 0: ot_h] gen_R;
  array[ot_h] real r;
  real gt_mean;
  real gt_var;
  vector[return_likelihood ? ot : 0] log_lik;
  if (estimate_r){
#include chunks/gt_rev_pmf.stan
    // estimate growth from estimated Rt
    gt_mean = rev_pmf_mean(gt_rev_pmf, 1);
    gt_var = rev_pmf_var(gt_rev_pmf, 1, gt_mean);
    r = R_to_growth(R, gt_mean, gt_var);
  } else {
    // sample generation time
    array[delay_n_p] real delay_mean_sample =
      normal_rng(delay_mean_mean, delay_mean_sd);
    array[delay_n_p] real delay_sd_sample =
      normal_rng(delay_sd_mean, delay_sd_sd);
    vector[delay_type_max[gt_id] + 1] sampled_gt_rev_pmf = get_delay_rev_pmf(
      gt_id, delay_type_max[gt_id] + 1, delay_types_p, delay_types_id,
      delay_types_groups, delay_max, delay_np_pmf,
      delay_np_pmf_groups, delay_mean_sample, delay_sd_sample,
      delay_dist, 1, 1, 0
    );
    gt_mean = rev_pmf_mean(sampled_gt_rev_pmf, 1);
    gt_var = rev_pmf_var(sampled_gt_rev_pmf, 1, gt_mean);
    // calculate Rt using infections and generation time
    gen_R = calculate_Rt(
      infections, seeding_time, sampled_gt_rev_pmf, rt_half_window
    );
    // estimate growth from calculated Rt
    r = R_to_growth(gen_R, gt_mean, gt_var);
  }
  // simulate reported cases
  imputed_reports = report_rng(reports, rep_phi, model_type);
  // log likelihood of model
  if (return_likelihood) {
#include chunks/report_log_lik.stan
  }
}
