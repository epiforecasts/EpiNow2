functions {
#include functions/pmfs.stan
#include functions/convolve.stan
#include functions/gaussian_process.stan
#include functions/rt.stan
#include functions/infections.stan
#include functions/observation_model.stan
#include functions/generated_quantities.stan
}


data {
#include data/observations.stan
#include data/delays.stan
#include data/gaussian_process.stan
#include data/generation_time.stan
#include data/rt.stan
#include data/observation_model.stan
}

transformed data{
  // observations
  int ot = t - seeding_time - horizon;  // observed time
  int ot_h = ot + horizon;  // observed time + forecast horizon
  // non-parametric noise
  int noise_terms = setup_noise(ot_h, t, horizon, estimate_r, stationary, future_fixed, fixed_from);
  matrix[noise_terms, M] PHI = setup_gp(M, L, noise_terms);  // basis function 
  // Rt
  real r_logmean = log(r_mean^2 / sqrt(r_sd^2 + r_mean^2)); 
  real r_logsd = sqrt(log(1 + (r_sd^2 / r_mean^2))); 
}

parameters{
  // non-parametric noise
  real<lower = 0> rho[fixed ? 0 : 1];    // length scale of noise GP
  real<lower = 0> alpha[fixed ? 0 : 1];  // scale of of noise GP
  vector[fixed ? 0 : M] eta;             // unconstrained noise
  // Rt
  vector[estimate_r] log_R;             // baseline reproduction number estimate (log)
  vector[estimate_r > 0 ? seeding_time : 0] initial_infections;// seed infections 
  real<lower = 0> gt_mean[estimate_r];  // mean of generation time
  real <lower = 0> gt_sd[estimate_r];   // sd of generation time
  real bp_effects[bp_n];                // Rt breakpoint effects
  // observation model
  real<lower = 0> delay_mean[delays];   // mean of delays
  real<lower = 0> delay_sd[delays];     // sd of delays
  simplex[week_effect ? 7 : 1] day_of_week_simplex;   // day of week reporting effect 
  real<lower = 0> rep_phi[model_type];  // overdispersion of the reporting process
}

transformed parameters {
  vector[fixed ? 0 : noise_terms] noise;                  // noise  generated by the gaussian process
  vector[estimate_r > 0 ? ot_h : 0] R;                    // reproduction number
  vector[t] infections;                                   // latent infections
  vector[ot_h] reports;                                   // observed cases
  // GP in noise - spectral densities
  if (!fixed) {
    noise = update_gp(PHI, M, L, alpha[1], rho[1], eta);
  }
  // Estimate latent infections
  if (estimate_r) {
    // via Rt
    R = update_Rt(R, log_R[estimate_r], noise, breakpoints, bp_effects, stationary);
    infections = generate_infections(R, seeding_time, gt_mean, gt_sd, max_gt, shifted_cases, initial_infections);
  }else{
    // via deconvolution
    infections = deconvolve_infections(shifted_cases, noise, fixed);
  }
  // convolve from latent infections to mean of observations
  reports = convolve_to_report(infections, delay_mean, delay_sd, max_delay, seeding_time);
 // weekly reporting effect
 if (week_effect) {
   reports = day_of_week_effect(reports, day_of_week, day_of_week_simplex);
  }
}

model {
  // priors for noise GP
  if (!fixed) {
    gaussian_process_lp(rho, alpha, eta, lengthscale_alpha, lengthscale_beta, alpha_sd);
  }
  // penalised priors for delay distributions
  delays_lp(delay_mean, delay_mean_mean, delay_mean_sd, delay_sd, delay_sd_mean, delay_sd_sd, t);
  // Rt priors
  if (estimate_r) {
    // prior on R
    log_R ~ normal(r_logmean, r_logsd);
    //breakpoint effects on Rt
    if (bp_n > 0) {
      bp_effects ~ normal(0, 0.1);
    }
    // initial infections
    initial_infections ~ lognormal(0, 0.1);
    // penalised_prior on generation interval
    generation_time_lp(gt_mean, gt_mean_mean, gt_mean_sd, gt_sd, gt_sd_mean, gt_sd_sd, ot);
  }
  // observed reports from mean of reports
  report_lp(cases, reports, rep_phi, 1, model_type, horizon, 1);
}
  
generated quantities {
  int imputed_reports[ot_h]; 
  real r[estimate_r > 0 ? ot_h : 0];
  if (estimate_r) {
    // estimate growth rate from reproduction number and generation time
    r = R_to_growth(R, gt_mean[1], gt_sd[1]);
  }
  // simulate reported cases
  imputed_reports = report_rng(reports, rep_phi, model_type);
}

